From 79c4be494aaeebce96c19c6029632a01c013d548 Mon Sep 17 00:00:00 2001
From: Kei Okada <k-okada@jsk.t.u-tokyo.ac.jp>
Date: Thu, 28 Sep 2023 17:49:03 +0900
Subject: [PATCH 1/5] noetic support: 2to3 -w .

---
 package.xml                   |   2 +-
 rtshell/actions.py            |  54 ++--
 rtshell/comp_mgmt.py          |   4 +-
 rtshell/fmt.py                |   4 +-
 rtshell/gen_comp.py           |   2 +-
 rtshell/ilog.py               |   4 +-
 rtshell/modmgr.py             |  40 ++-
 rtshell/plan.py               |  22 +-
 rtshell/port_types.py         |   8 +-
 rtshell/rtact.py              |   2 +-
 rtshell/rtcat.py              |  68 ++---
 rtshell/rtcheck.py            |  20 +-
 rtshell/rtcomp.py             |  58 ++--
 rtshell/rtcon.py              |  24 +-
 rtshell/rtconf.py             |  32 +-
 rtshell/rtcryo.py             |  10 +-
 rtshell/rtcwd.py              |  20 +-
 rtshell/rtdeact.py            |   2 +-
 rtshell/rtdel.py              |  24 +-
 rtshell/rtdis.py              |  18 +-
 rtshell/rtdoc.py              |  32 +-
 rtshell/rtexit.py             |  18 +-
 rtshell/rtfind.py             |  14 +-
 rtshell/rtinject.py           |  38 ++-
 rtshell/rtinject_comp.py      |   4 +-
 rtshell/rtlog.py              | 115 ++++----
 rtshell/rtlog_comps.py        |  40 +--
 rtshell/rtls.py               |  16 +-
 rtshell/rtmgr.py              |  20 +-
 rtshell/rtprint.py            |  34 +--
 rtshell/rtprint_comp.py       |   6 +-
 rtshell/rtreset.py            |   2 +-
 rtshell/rtresurrect.py        |  16 +-
 rtshell/rtstart.py            |  22 +-
 rtshell/rtstodot.py           |  12 +-
 rtshell/rtstop.py             |  22 +-
 rtshell/rtteardown.py         |  16 +-
 rtshell/rtvlog.py             |  22 +-
 rtshell/simpkl_log.py         |   2 +-
 rtshell/state_control_base.py |  20 +-
 rtshell/text_log.py           |   2 +-
 setup.py                      |  14 +-
 test/logfile_unittests.py     | 532 +++++++++++++++++-----------------
 test/test_cmds.py             | 494 +++++++++++++++----------------
 test/unittests.py             |   2 +-
 45 files changed, 957 insertions(+), 976 deletions(-)

diff --git a/package.xml b/package.xml
index 8dd8847..68b3836 100644
--- a/package.xml
+++ b/package.xml
@@ -15,7 +15,7 @@
 
   <buildtool_depend>catkin</buildtool_depend>
 
-  <build_depend>python-setuptools</build_depend>
+  <build_depend>python3-setuptools</build_depend>
   <build_depend>python-omniorb</build_depend>
 
   <run_depend>rtctree</run_depend>
diff --git a/rtshell/actions.py b/rtshell/actions.py
index 49853e8..c0d554d 100644
--- a/rtshell/actions.py
+++ b/rtshell/actions.py
@@ -23,8 +23,8 @@ import sys
 import rtctree.exceptions
 import rtctree.path
 
-import option_store
-import rts_exceptions
+from . import option_store
+from . import rts_exceptions
 
 
 ###############################################################################
@@ -116,10 +116,10 @@ class BaseCallback(object):
     def __call__(self, result, err_msg):
         if err_msg:
             if not result:
-                print >>sys.stderr, 'Action failed: ' + err_msg
+                print('Action failed: ' + err_msg, file=sys.stderr)
         else:
             if not result:
-                print >>sys.stderr, 'Action failed.'
+                print('Action failed.', file=sys.stderr)
 
     def __str__(self):
         return ''
@@ -173,9 +173,9 @@ class CheckForRequiredCompAct(Action):
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Checking for required component {0} with ID \
+            print('Checking for required component {0} with ID \
 "{1}" and instance name "{2}"'.format(self._path_str, self._id,
-                    self._instance_name)
+                    self._instance_name), file=sys.stderr)
         # Check there is a component at the specified path
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
@@ -226,8 +226,8 @@ component at path {1}'.format(self._port_name, self._path_str))
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Checking for required port {0} on component \
-{1}'.format(self._port_name, self._path_str)
+            print('Checking for required port {0} on component \
+{1}'.format(self._port_name, self._path_str), file=sys.stderr)
         # Get the component at the specified path
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
@@ -267,8 +267,8 @@ class CheckActiveConfigSetAct(Action):
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Checking configuration set "{0}" is active '\
-                    'on component {1}'.format(self._set, self._path_str)
+            print('Checking configuration set "{0}" is active '\
+                    'on component {1}'.format(self._set, self._path_str), file=sys.stderr)
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
             return False, 'Component missing: {0}'.format(self._path_str)
@@ -306,8 +306,8 @@ component at path {1}'.format(self._set, self._path_str))
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Setting configuration set "{0}" active on \
-component {1}'.format(self._set, self._path_str)
+            print('Setting configuration set "{0}" active on \
+component {1}'.format(self._set, self._path_str), file=sys.stderr)
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
             return False, 'Component missing: {0}'.format(self._path_str)
@@ -347,9 +347,9 @@ class CheckConfigParamAct(Action):
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Checking parameter "{0}" in set "{1}" on '\
+            print('Checking parameter "{0}" in set "{1}" on '\
                     'component "{2}" is "{3}"'.format(self._param, self._set,
-                            self._path_str, self._value)
+                            self._path_str, self._value), file=sys.stderr)
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
             return False, 'Component missing: {0}'.format(self._path_str)
@@ -396,9 +396,9 @@ component at path {2} to "{3}"'.format(self._param, self._set,
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Setting parameter "{0}" in set "{1}" on \
+            print('Setting parameter "{0}" in set "{1}" on \
 component at path {2} to "{3}"'.format(self._param, self._set,
-                    self._path_str, self._new_value)
+                    self._path_str, self._new_value), file=sys.stderr)
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
             return False, 'Component missing: {0}'.format(self._path_str)
@@ -449,9 +449,9 @@ class CheckForConnAct(Action):
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print 'Checking for connection between {0}:{1} and ' \
+            print('Checking for connection between {0}:{1} and ' \
                     '{2}:{3}'.format(self._source[0], self._source[1],
-                            self._dest[0], self._dest[1])
+                            self._dest[0], self._dest[1]))
         # Get the source component
         s_comp = rtctree.get_node(self._s_path)
         if not s_comp or not s_comp.is_component:
@@ -527,10 +527,10 @@ ID {4} and properties {5}'.format(self._source_path_str, self._source_port,
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, 'Connect {0}:{1} to {2}:{3} with \
+            print('Connect {0}:{1} to {2}:{3} with \
 ID {4} and properties {5}'.format(self._source_path_str, self._source_port,
                     self._dest_path_str, self._dest_port, self._id,
-                    self._properties)
+                    self._properties), file=sys.stderr)
         source_comp = rtctree.get_node(self._source_path)
         if not source_comp or not source_comp.is_component:
             return False, 'Source component missing: {0}'.format(\
@@ -579,9 +579,8 @@ ID {4} and properties {5}'.format(self._source_path_str, self._source_port,
                                         self._source_port, self._dest_path_str,
                                         self._dest_port, self._id)
                 if option_store.OptionStore().verbose:
-                    print >>sys.stderr, \
-                            'Skipped existing connection with ID {0}'.format(
-                                    self._id)
+                    print('Skipped existing connection with ID {0}'.format(
+                                    self._id), file=sys.stderr)
                 return True, None
 
 
@@ -614,10 +613,9 @@ class DisconnectPortsAct(Action):
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, \
-                    'Disconnecting {0}:{1} from {2}:{3} with ID {4}'.format(\
+            print('Disconnecting {0}:{1} from {2}:{3} with ID {4}'.format(\
                     self._source_path_str, self._source_port,
-                    self._dest_path_str, self._dest_port, self._id)
+                    self._dest_path_str, self._dest_port, self._id), file=sys.stderr)
         source_comp = rtctree.get_node(self._source_path)
         if not source_comp or not source_comp.is_component:
             return False, 'Source component missing: {0}'.format(\
@@ -698,8 +696,8 @@ class StateChangeAct(Action):
 
     def _execute(self, rtctree):
         if option_store.OptionStore().verbose:
-            print >>sys.stderr, '{0} {1} in {2}'.format(self._verbose_str,
-                    self._path_str, self._ec_id)
+            print('{0} {1} in {2}'.format(self._verbose_str,
+                    self._path_str, self._ec_id), file=sys.stderr)
         comp = rtctree.get_node(self._path)
         if not comp or not comp.is_component:
             return False, 'Component missing: {0}'.format(self._path_str)
diff --git a/rtshell/comp_mgmt.py b/rtshell/comp_mgmt.py
index 8a2bb9d..6ffce08 100644
--- a/rtshell/comp_mgmt.py
+++ b/rtshell/comp_mgmt.py
@@ -26,8 +26,8 @@ import rtctree.tree
 import rtctree.utils
 import sys
 
-import gen_comp
-import rts_exceptions
+from . import gen_comp
+from . import rts_exceptions
 
 
 def find_comp_in_mgr(name, mgr):
diff --git a/rtshell/fmt.py b/rtshell/fmt.py
index 55f941b..a2d7cd7 100644
--- a/rtshell/fmt.py
+++ b/rtshell/fmt.py
@@ -19,7 +19,7 @@ Built-in formatters for rtprint.
 '''
 
 import inspect
-import rts_exceptions
+from . import rts_exceptions
 
 
 ###############################################################################
@@ -49,7 +49,7 @@ def import_formatter(form, modmgr):
         form_rpl = 'fmt.' + form[8:]
     try:
         form_fun = modmgr.evaluate(form_rpl)
-    except Exception, e:
+    except Exception as e:
         raise rts_exceptions.ImportFormatterError(e)
     # Check if the formatter is a function
     if type(form_fun) != type(import_formatter):
diff --git a/rtshell/gen_comp.py b/rtshell/gen_comp.py
index 164ebf4..0068e77 100644
--- a/rtshell/gen_comp.py
+++ b/rtshell/gen_comp.py
@@ -154,7 +154,7 @@ class GenComp(OpenRTM_aist.DataFlowComponentBase):
                 self._ports[p.name] = Port(p_data, p_port,
                         formatter=p.formatter, raw_spec=p)
         except:
-            print >>sys.stderr, traceback.format_exc()
+            print(traceback.format_exc(), file=sys.stderr)
             return RTC.RTC_ERROR
         return RTC.RTC_OK
 
diff --git a/rtshell/ilog.py b/rtshell/ilog.py
index df16c61..2701ed5 100644
--- a/rtshell/ilog.py
+++ b/rtshell/ilog.py
@@ -172,7 +172,7 @@ class Log(object):
     def __iter__(self):
         return self
 
-    def next(self):
+    def __next__(self):
         d = self.read()
         if not d:
             raise StopIteration
@@ -361,5 +361,5 @@ class Log(object):
     def _vb_print(self, string):
         '''Print verbose information when self._vb is True.'''
         if self._vb:
-            print >>sys.stderr, string
+            print(string, file=sys.stderr)
 
diff --git a/rtshell/modmgr.py b/rtshell/modmgr.py
index 5c440a4..29abd40 100644
--- a/rtshell/modmgr.py
+++ b/rtshell/modmgr.py
@@ -28,7 +28,7 @@ import RTC
 import sys
 import time
 
-import rts_exceptions
+from . import rts_exceptions
 
 
 ###############################################################################
@@ -84,7 +84,7 @@ class ModuleMgr(object):
     def _add_paths(self, paths=[]):
         for p in paths:
             if self._verb:
-                print >>sys.stderr, 'Adding {0} to PYTHONPATH'.format(p)
+                print('Adding {0} to PYTHONPATH'.format(p), file=sys.stderr)
             sys.path.insert(0, p)
 
     def evaluate(self, expr):
@@ -93,7 +93,7 @@ class ModuleMgr(object):
         if not repl_expr:
             raise rts_exceptions.EmptyConstExprError
         if self._verb:
-            print >>sys.stderr, 'Evaluating expression {0}'.format(repl_expr)
+            print('Evaluating expression {0}'.format(repl_expr), file=sys.stderr)
         const = eval(repl_expr)
         return const
 
@@ -110,12 +110,12 @@ class ModuleMgr(object):
         self._auto_import(name)
         # Strip the name down to the class
         name = _find_object_name(name)
-        for m in self._mods.values():
+        for m in list(self._mods.values()):
             if m.name == 'RTC':
                 # Search RTC last to allow user types to override RTC types
                 continue
             types = [member for member in inspect.getmembers(m.mod,
-                    inspect.isclass) if member[0] == name or "IDL:"+self._mods.keys()[0]+"/"+member[0]+":1.0" == name]
+                    inspect.isclass) if member[0] == name or "IDL:"+list(self._mods.keys())[0]+"/"+member[0]+":1.0" == name]
             if len(types) == 0:
                 continue
             elif len(types) != 1:
@@ -123,12 +123,12 @@ class ModuleMgr(object):
             else:
                 # Check for the POA module
                 if m.name != 'RTC':
-                    if not [other_m for other_m in self._mods.values() \
+                    if not [other_m for other_m in list(self._mods.values()) \
                             if other_m.name == m.name + '__POA']:
                         raise rts_exceptions.MissingPOAError(m.name)
                 if self._verb:
-                    print >>sys.stderr, 'Found type {0} in module {1}'.format(
-                            name, m.name)
+                    print('Found type {0} in module {1}'.format(
+                            name, m.name), file=sys.stderr)
                 return types[0][1]
         # If got to here, the type was not found in any other module, so search
         # the RTC module
@@ -139,8 +139,8 @@ class ModuleMgr(object):
             if len(types) != 1:
                 raise rts_exceptions.AmbiguousTypeError(type_name)
             if self._verb:
-                print >>sys.stderr, 'Found type {0} in module {1}'.format(
-                        name, m.name)
+                print('Found type {0} in module {1}'.format(
+                        name, m.name), file=sys.stderr)
             return types[0][1]
         raise rts_exceptions.TypeNotFoundError(name)
 
@@ -168,13 +168,13 @@ class ModuleMgr(object):
             try:
                 self.load_mod(m + '__POA')
             except ImportError:
-                print >>sys.stderr, '{0}: Failed to import module {1}'.format(\
-                        os.path.basename(sys.argv[0]), m + '__POA')
+                print('{0}: Failed to import module {1}'.format(\
+                        os.path.basename(sys.argv[0]), m + '__POA'), file=sys.stderr)
                 pass
 
     @property
     def loaded_mod_names(self):
-        return self._mods.keys()
+        return list(self._mods.keys())
 
     def _auto_import(self, expr):
         '''Tries to import all module names found in an expression.
@@ -184,22 +184,20 @@ class ModuleMgr(object):
         '''
         names = [m for m in _find_module_names(expr) if m not in self._mods]
         if self._verb:
-            print >>sys.stderr, 'Automatically importing modules {0}'.format(
-                    names)
+            print('Automatically importing modules {0}'.format(
+                    names), file=sys.stderr)
         for n in names:
             try:
                 self.load_mod(n)
             except ImportError:
-                print >>sys.stderr, \
-                        '{0}: Warning: failed to import module {1}'.format(
-                                os.path.basename(sys.argv[0]), n)
+                print('{0}: Warning: failed to import module {1}'.format(
+                                os.path.basename(sys.argv[0]), n), file=sys.stderr)
                 continue
             try:
                 self.load_mod(n + '__POA')
             except ImportError:
-                print >>sys.stderr, \
-                        '{0}: Warning: failed to import module {1}'.format(
-                                os.path.basename(sys.argv[0]), n + '__POA')
+                print('{0}: Warning: failed to import module {1}'.format(
+                                os.path.basename(sys.argv[0]), n + '__POA'), file=sys.stderr)
                 continue
 
     def _repl_mod_name(self, expr):
diff --git a/rtshell/plan.py b/rtshell/plan.py
index 8be5b9d..f7ecdad 100644
--- a/rtshell/plan.py
+++ b/rtshell/plan.py
@@ -22,13 +22,13 @@ import os
 import rtctree.path
 import rtsprofile.message_sending
 import sys
-import thread
+import _thread
 import threading
 import time
 import traceback
 import types
 
-import rts_exceptions
+from . import rts_exceptions
 
 
 class Counter:
@@ -214,8 +214,8 @@ class ActionExecutor(threading.Thread):
             c(*self._args, **self._kwargs)
 
     def _execute_action(self):
-        print >>sys.stderr, 'Executing {0} {1}'.format(self.id_string,
-                self._action)
+        print('Executing {0} {1}'.format(self.id_string,
+                self._action), file=sys.stderr)
         self._action(*self._args, **self._kwargs)
         self._do_callbacks()
 
@@ -379,7 +379,7 @@ class DelayedCondition(BasicCondition, threading.Thread):
         while True:
             try:
                 satisfied = self._check()
-            except Exception, e:
+            except Exception as e:
                 self._set_error(traceback.format_exc())
                 break
             with self._cancel_lock:
@@ -391,7 +391,7 @@ class DelayedCondition(BasicCondition, threading.Thread):
                 # Signal the owner
                 self._executor.set()
                 break
-            if type(self._timeout) is not types.NoneType:
+            if type(self._timeout) is not type(None):
                 # Check if the remaining time is greater than zero
                 if self._check_timeout() <= 0.0:
                     self._set_error(
@@ -594,9 +594,9 @@ class Plan(object):
                             action.add_condition(mc)
                             target_p = (p.id, p.component_id, p.instance_name)
                             if all[target_p].action.optional:
-                                print >>sys.stderr, 'Warning: action depends \
+                                print('Warning: action depends \
 on an optional action: "{0}". This may cause a deadlock if the previous \
-action\'s component is not present.'.format(desc)
+action\'s component is not present.'.format(desc), file=sys.stderr)
                     else:
                         # Wait for action to occur
                         for p in c.preceding_components:
@@ -611,11 +611,11 @@ action\'s component is not present.'.format(desc)
                             target_p = (p.id, p.component_id, p.instance_name)
                             all[target_p].add_callback(_make_action_cb(ec))
                             if all[target_p].action.optional:
-                                print >>sys.stderr, 'Warning: action depends \
+                                print('Warning: action depends \
 on an optional action: "{0}". This may cause a deadlock if the previous \
-action\'s component is not present.'.format(desc)
+action\'s component is not present.'.format(desc), file=sys.stderr)
 
-        for k, a in all.items():
+        for k, a in list(all.items()):
             if a.immediate:
                 self._immediates.append(a)
             else:
diff --git a/rtshell/port_types.py b/rtshell/port_types.py
index 511467c..78e766d 100644
--- a/rtshell/port_types.py
+++ b/rtshell/port_types.py
@@ -22,9 +22,9 @@ Classes and functions for managing port types.
 import re
 import rtctree.path
 
-import comp_mgmt
-import fmt
-import rts_exceptions
+from . import comp_mgmt
+from . import fmt
+from . import rts_exceptions
 
 
 ###############################################################################
@@ -159,7 +159,7 @@ def make_port_specs(ports, modmgr, tree):
             result[name] = (PortSpec(name, port_cons, (rtc, port), input=input,
                 formatter=formatter,
                 type_name=port_obj.properties['dataport.data_type'], raw=raw))
-    return result.values()
+    return list(result.values())
 
 
 def parse_targets(targets):
diff --git a/rtshell/rtact.py b/rtshell/rtact.py
index 512a7c7..66517b7 100644
--- a/rtshell/rtact.py
+++ b/rtshell/rtact.py
@@ -19,7 +19,7 @@ Implementation of the command to move a component to the activated state.
 '''
 
 
-import state_control_base
+from . import state_control_base
 
 
 def activate_action(object, ec_index):
diff --git a/rtshell/rtcat.py b/rtshell/rtcat.py
index f5fa05d..4f9a0ee 100644
--- a/rtshell/rtcat.py
+++ b/rtshell/rtcat.py
@@ -30,15 +30,15 @@ import SDOPackage
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
 def format_port(port, comp, start_indent=0, use_colour=True, long=0):
     result = []
     indent = start_indent
-    if long > 0:
+    if int > 0:
         tag = '-'
     else:
         tag = '+'
@@ -47,9 +47,9 @@ def format_port(port, comp, start_indent=0, use_colour=True, long=0):
                 rtctree.utils.build_attr_string('reset', supported=use_colour)
     result.append('{0}{1}: {2}'.format(tag.rjust(indent), port.porttype,
                                        name_string))
-    if long > 0:
+    if int > 0:
         indent += 2
-        keys = port.properties.keys()
+        keys = list(port.properties.keys())
         keys.sort()
         pad_length = max([len(key) for key in keys]) + 2
         for key in keys:
@@ -72,7 +72,7 @@ def format_port(port, comp, start_indent=0, use_colour=True, long=0):
                 indent -= 2
         num_conns = len(port.connections)
         for conn in port.connections:
-            if long > 1:
+            if int > 1:
                 tag2 = '-'
             else:
                 tag2 = '+'
@@ -100,9 +100,9 @@ def format_port(port, comp, start_indent=0, use_colour=True, long=0):
                             supported=use_colour) + dp + \
                                 rtctree.utils.build_attr_string('reset',
                                     supported=use_colour)))
-                if long > 1:
+                if int > 1:
                     indent += 2
-                    keys = [k for k in conn.properties.keys() \
+                    keys = [k for k in list(conn.properties.keys()) \
                             if not k.endswith('inport_ref') \
                             if not k.endswith('inport_ior')]
                     pad_length = max([len('Name')] + \
@@ -157,13 +157,13 @@ def format_composite(comp, tree, start_indent=0, use_colour=True, long=0):
                 supported=use_colour) + sdo_id + \
                         rtctree.utils.build_attr_string('reset',
                         supported=use_colour)
-        if long > 0:
+        if int > 0:
             tag = '-'
         else:
             tag = '+'
         result.append('{0}Composition {1}'.format(tag.rjust(indent),
             id_str))
-        if long > 0:
+        if int > 0:
             indent += 2
             padding = 8 # = len('Member') + 2
             result.append('{0}{1}{2}'.format(''.ljust(indent),
@@ -192,13 +192,13 @@ def format_comp_member(comp, tree, start_indent=0, use_colour=True, long=0):
                 supported=use_colour) + sdo_id + \
                         rtctree.utils.build_attr_string('reset',
                         supported=use_colour)
-        if long > 0:
+        if int > 0:
             tag = '-'
         else:
             tag = '+'
         result.append('{0}Parent composition {1}'.format(tag.rjust(indent),
             id_str))
-        if long > 0:
+        if int > 0:
             indent += 2
             padding = 6 # = len('Path') + 2
             result.append('{0}{1}{2}'.format(''.ljust(indent),
@@ -221,7 +221,7 @@ def format_ec(ec, start_indent=0, use_colour=True, long=0):
             supported=use_colour) + str(ec.handle) + \
                     rtctree.utils.build_attr_string('reset',
                     supported=use_colour)
-    if long > 0:
+    if int > 0:
         result.append('{0}Execution Context {1}'.format(\
                 '-'.rjust(indent), handle_str))
         padding = 7 # = len('State') + 2
@@ -238,7 +238,7 @@ def format_ec(ec, start_indent=0, use_colour=True, long=0):
             result.append('{0}{1}{2}'.format(''.ljust(indent),
                 'Owner'.ljust(padding), ec.owner_name))
         if ec.participant_names:
-            if long > 1:
+            if int > 1:
                     result.append('{0}{1}'.format('-'.rjust(indent),
                         'Participants'.ljust(padding)))
                     indent += 2
@@ -250,11 +250,11 @@ def format_ec(ec, start_indent=0, use_colour=True, long=0):
                 result.append('{0}{1}'.format('+'.rjust(indent),
                     'Participants'.ljust(padding)))
         if ec.properties:
-            if long > 1:
+            if int > 1:
                 result.append('{0}{1}'.format('-'.rjust(indent),
                     'Extra properties'.ljust(padding)))
                 indent += 2
-                keys = ec.properties.keys()
+                keys = list(ec.properties.keys())
                 keys.sort()
                 pad_length = max([len(key) for key in keys]) + 2
                 for key in keys:
@@ -301,11 +301,11 @@ def format_component(comp, tree, use_colour=True, long=0):
                                          item[1]))
 
     if comp.properties:
-        if long > 1:
+        if int > 1:
             result.append('{0}Extra properties:'.format(''.ljust(indent)))
             indent += 2
             extra_props = comp.properties
-            keys = extra_props.keys()
+            keys = list(extra_props.keys())
             keys.sort()
             pad_length = max([len(key) for key in keys]) + 2
             for key in keys:
@@ -319,16 +319,16 @@ def format_component(comp, tree, use_colour=True, long=0):
 
     if comp.is_composite:
         result += format_composite(comp, tree, start_indent=indent,
-                use_colour=use_colour, long=long)
+                use_colour=use_colour, int=int)
     if comp.is_composite_member:
         result += format_comp_member(comp, tree, start_indent=indent,
-                use_colour=use_colour, long=long)
+                use_colour=use_colour, int=int)
     for ec in comp.owned_ecs:
         result += format_ec(ec, start_indent=indent,
-                use_colour=use_colour, long=long)
+                use_colour=use_colour, int=int)
     for p in comp.ports:
         result += format_port(p, comp, start_indent=indent,
-                use_colour=use_colour, long=long)
+                use_colour=use_colour, int=int)
 
     return result
 
@@ -338,9 +338,9 @@ def format_manager(mgr, use_colour=True, long=0):
         if key in mgr.profile:
             dest.append('{0}: {1}'.format(title, mgr.profile[key]))
         else:
-            print >>sys.stderr, '{0}: Warning: "{1}" profile entry is \
+            print('{0}: Warning: "{1}" profile entry is \
 missing. Possible version conflict between rtshell and OpenRTM-aist.'.format(\
-                    sys.argv[0], key)
+                    sys.argv[0], key), file=sys.stderr)
 
     result = []
     add_profile_entry(result, 'Name', 'name')
@@ -410,16 +410,16 @@ def cat_target(cmd_path, full_path, options, tree=None):
         if not p:
             raise rts_exceptions.PortNotFoundError(path, port)
         return format_port(p, object, start_indent=0,
-                use_colour=use_colour, long=options.long)
+                use_colour=use_colour, int=options.long)
     else:
         if object.is_component:
             if trailing_slash:
                 raise rts_exceptions.NoSuchObjectError(cmd_path)
             return format_component(object, tree, use_colour=use_colour,
-                    long=options.long)
+                    int=options.long)
         elif object.is_manager:
             return format_manager(object, use_colour=use_colour,
-                    long=options.long)
+                    int=options.long)
         elif object.is_zombie:
             raise rts_exceptions.ZombieObjectError(cmd_path)
         else:
@@ -442,29 +442,29 @@ Display information about a manager or component.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1, []
 
     if not args:
         # If no path given then can't do anything.
-        print >>sys.stderr, '{0}: Cannot cat a directory.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: Cannot cat a directory.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1, []
     elif len(args) == 1:
         cmd_path = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1, []
     full_path = path.cmd_path_to_full_path(cmd_path)
 
     result = []
     try:
         result = cat_target(cmd_path, full_path, options, tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1, []
     return 0, result
 
diff --git a/rtshell/rtcheck.py b/rtshell/rtcheck.py
index bf09ca7..c14b2d3 100644
--- a/rtshell/rtcheck.py
+++ b/rtshell/rtcheck.py
@@ -27,9 +27,9 @@ import rtsprofile.rts_profile
 import sys
 import traceback
 
-import actions
-import option_store
-import rts_exceptions
+from . import actions
+from . import option_store
+from . import rts_exceptions
 import rtshell
 
 
@@ -46,7 +46,7 @@ class SystemNotOKCB(rtshell.actions.BaseCallback):
 
     def __call__(self, result, err_msg):
         if err_msg:
-            print >>sys.stderr, err_msg
+            print(err_msg, file=sys.stderr)
         if not result:
             self._failed = True
 
@@ -164,7 +164,7 @@ def check(profile=None, xml=True, state='Active', dry_run=False, tree=None):
             check_configs(rtsp, cb) + check_states(rtsp, state, cb))
     if dry_run:
         for a in actions:
-            print a
+            print(a)
     else:
         if not tree:
             # Load the RTC Tree, using the paths from the profile
@@ -200,8 +200,8 @@ Check that the running RT System conforms to an RTSProfile.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError: ', e
+    except optparse.OptionError as e:
+        print('OptionError: ', e, file=sys.stderr)
         return 1
     rtshell.option_store.OptionStore().verbose = options.verbose
 
@@ -210,17 +210,17 @@ Check that the running RT System conforms to an RTSProfile.'''
     elif len(args) == 1:
         profile = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         if not check(profile=profile, xml=options.xml, state=options.state,
                 dry_run=options.dry_run, tree=tree):
             return 1
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(sys.argv[0], e)
+        print('{0}: {1}'.format(sys.argv[0], e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtcomp.py b/rtshell/rtcomp.py
index e9acfc6..ab86370 100644
--- a/rtshell/rtcomp.py
+++ b/rtshell/rtcomp.py
@@ -30,10 +30,11 @@ import SDOPackage__POA
 import sys
 import traceback
 
-import path
-import rtmgr
-import rts_exceptions
+from . import path
+from . import rtmgr
+from . import rts_exceptions
 import rtshell
+from functools import reduce
 
 
 def parse_member_paths(source_paths):
@@ -96,8 +97,7 @@ def add_to_composition(comp, rtcs, tree, verbose):
             p_name = rtcs[rtc][0].instance_name + '.' + p
             if p_name not in new_ports:
                 if verbose:
-                    print >>sys.stderr, \
-                            'Exporting port {0} from composition'.format(p_name)
+                    print('Exporting port {0} from composition'.format(p_name), file=sys.stderr)
                 new_ports.append(p_name)
     if new_ports:
         new_ports = reduce(lambda x, y: x + ',' + y, new_ports)
@@ -109,14 +109,12 @@ def add_to_composition(comp, rtcs, tree, verbose):
         c = rtcs[rtc][0]
         if not comp.is_member(c):
             if verbose:
-                print >>sys.stderr, \
-                        'Adding component {0} to composition'.format(rtc)
+                print('Adding component {0} to composition'.format(rtc), file=sys.stderr)
             to_add.append(c)
         elif verbose and not rtcs[rtc][1]:
             # Only print this message if the component didn't have any ports to
             # add
-            print >>sys.stderr, \
-                    'Component {0} is already in composition'.format(rtc)
+            print('Component {0} is already in composition'.format(rtc), file=sys.stderr)
     comp.add_members(to_add)
 
 
@@ -133,13 +131,11 @@ def rem_from_composition(comp, rtcs, tree, verbose):
             p_name = inst_name + '.' + p
             if p_name in new_ports:
                 if verbose:
-                    print >>sys.stderr, \
-                            'Hiding port {0} in composition'.format(p_name)
+                    print('Hiding port {0} in composition'.format(p_name), file=sys.stderr)
                 new_ports.remove(p_name)
             elif verbose:
-                print >>sys.stderr, \
-                        'Port {0} is already hidden in composition'.format(
-                                p_name)
+                print('Port {0} is already hidden in composition'.format(
+                                p_name), file=sys.stderr)
     if new_ports:
         new_ports = reduce(lambda x, y: x + ',' + y, new_ports)
     else:
@@ -155,12 +151,10 @@ def rem_from_composition(comp, rtcs, tree, verbose):
         c = rtcs[rtc][0]
         if comp.is_member(c):
             if verbose:
-                print >>sys.stderr, \
-                        'Removing component {0} from composition'.format(rtc)
+                print('Removing component {0} from composition'.format(rtc), file=sys.stderr)
             to_remove.append(c)
         elif verbose:
-            print >>sys.stderr, \
-                    'Component {0} is not in composition'.format(rtc)
+            print('Component {0} is not in composition'.format(rtc), file=sys.stderr)
     comp.remove_members(to_remove)
 
 
@@ -207,21 +201,21 @@ def manage_composition(tgt_raw_path, tgt_full_path, options, tree=None):
                 raise rts_exceptions.CannotRemoveFromNewCompositionError()
             # No composition exists in this manager; make a new one
             if options.verbose:
-                print >>sys.stderr, 'Creating new composition {0}'.format(
-                        tgt_raw_path)
+                print('Creating new composition {0}'.format(
+                        tgt_raw_path), file=sys.stderr)
             comp = create_composition(tgt_obj, tgt_suffix, options.options,
                     options.type)
         elif options.verbose:
-            print >>sys.stderr, 'Editing existing composition {0}'.format(
-                    tgt_raw_path)
+            print('Editing existing composition {0}'.format(
+                    tgt_raw_path), file=sys.stderr)
     elif tgt_obj.is_component:
         # Edit composition - there should be no suffix
         if tgt_suffix:
             raise rts_exceptions.NotAComponentError(tgt_raw_path)
         comp = tgt_obj
         if options.verbose:
-            print >>sys.stderr, 'Editing existing composition {0}'.format(
-                    tgt_raw_path)
+            print('Editing existing composition {0}'.format(
+                    tgt_raw_path), file=sys.stderr)
     else:
         raise rts_exceptions.NotAComponentOrManagerError(tgt_raw_path)
     if not comp.is_composite:
@@ -234,8 +228,8 @@ def manage_composition(tgt_raw_path, tgt_full_path, options, tree=None):
         rem_from_composition(comp, rem_rtcs, tree, options.verbose)
     if not comp.members[comp.organisations[0].org_id]:
         if options.verbose:
-            print >>sys.stderr, 'Composition {0} has no members'.format(
-                    tgt_raw_path)
+            print('Composition {0} has no members'.format(
+                    tgt_raw_path), file=sys.stderr)
 
 
 def main(argv=None, tree=None):
@@ -264,22 +258,22 @@ Manage composite components.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if len(args) != 1:
-        print >>sys.stderr, '{0}: No manager or existing composite component '\
-            'specified.'.format(sys.argv[0])
+        print('{0}: No manager or existing composite component '\
+            'specified.'.format(sys.argv[0]), file=sys.stderr)
         return 1
     full_path = path.cmd_path_to_full_path(args[0])
 
     try:
         manage_composition(args[0], full_path, options, tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(sys.argv[0], e)
+        print('{0}: {1}'.format(sys.argv[0], e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtcon.py b/rtshell/rtcon.py
index f65159d..fb32953 100644
--- a/rtshell/rtcon.py
+++ b/rtshell/rtcon.py
@@ -28,20 +28,20 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
 def connect_ports(paths, options, tree=None):
-    cmd_paths, fps = zip(*paths)
+    cmd_paths, fps = list(zip(*paths))
     pathports = [rtctree.path.parse_path(fp) for fp in fps]
     for ii, p in enumerate(pathports):
         if not p[1]:
             raise rts_exceptions.NotAPortError(cmd_paths[ii])
         if not p[0][-1]:
             raise rts_exceptions.NotAPortError(cmd_paths[ii])
-    paths, ports = zip(*pathports)
+    paths, ports = list(zip(*pathports))
 
     if not tree:
         tree = rtctree.tree.RTCTree(paths=paths, filter=paths)
@@ -74,8 +74,8 @@ def main(argv=None, tree=None):
         if not getattr(parser.values, option.dest):
             setattr(parser.values, option.dest, {})
         if key in getattr(parser.values, option.dest):
-            print >>sys.stderr, '{0}: Warning: duplicate property: {1}'.format(
-                    sys.argv[0], option_value)
+            print('{0}: Warning: duplicate property: {1}'.format(
+                    sys.argv[0], option_value), file=sys.stderr)
         getattr(parser.values, option.dest)[key] = value
 
     usage = '''Usage: %prog [options] <path 1> <path 2> [<path 3> ...]
@@ -98,8 +98,8 @@ Connect two or more ports.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if not getattr(options, 'properties'):
@@ -107,17 +107,17 @@ Connect two or more ports.'''
 
     if not args:
         # If no paths given then can't do anything.
-        print >>sys.stderr, '{0}: No ports specified.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: No ports specified.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1
     paths = [(p, path.cmd_path_to_full_path(p)) for p in args]
 
     try:
         connect_ports(paths, options, tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtconf.py b/rtshell/rtconf.py
index a703002..687e61b 100644
--- a/rtshell/rtconf.py
+++ b/rtshell/rtconf.py
@@ -29,9 +29,9 @@ import rtctree.utils
 import sys
 import traceback
 
-import path
+from . import path
 import rtshell
-import rts_exceptions
+from . import rts_exceptions
 
 
 def is_hidden(name):
@@ -43,7 +43,7 @@ def is_hidden(name):
 def format_conf_set(set_name, set, is_active, use_colour, long):
     result = []
     indent = 0
-    if long:
+    if int:
         tag = '-'
     else:
         tag = '+'
@@ -61,8 +61,8 @@ def format_conf_set(set_name, set, is_active, use_colour, long):
             title += '  ({0})'.format(set.description)
     result.append(title)
 
-    if long:
-        params = set.data.keys()
+    if int:
+        params = list(set.data.keys())
         if params:
             params.sort()
             padding = len(max(params, key=len)) + 2
@@ -77,11 +77,11 @@ def format_conf_set(set_name, set, is_active, use_colour, long):
 
 def format_conf_sets(sets, active_set_name, all, use_colour, long):
     result = []
-    set_keys = [k for k in sets.keys() if not is_hidden(k) or all]
+    set_keys = [k for k in list(sets.keys()) if not is_hidden(k) or all]
     set_keys.sort()
     for set_name in set_keys:
         result += format_conf_set(set_name, sets[set_name],
-            set_name == active_set_name, use_colour, long)
+            set_name == active_set_name, use_colour, int)
     return result
 
 
@@ -186,12 +186,12 @@ Display and edit configuration parameters and sets.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1, []
 
     if not args:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1, []
     elif len(args) == 1:
         cmd_path = args[0]
@@ -214,7 +214,7 @@ Display and edit configuration parameters and sets.'''
                 param = args[0]
                 new_value = args[1]
             else:
-                print >>sys.stderr, usage
+                print(usage, file=sys.stderr)
                 return 1, []
             set_conf_value(param, new_value, cmd_path, full_path, options,
                     tree)
@@ -223,21 +223,21 @@ Display and edit configuration parameters and sets.'''
             if len(args) == 1:
                 param = args[0]
             else:
-                print >>sys.stderr, usage
+                print(usage, file=sys.stderr)
                 return 1, []
             result = get_conf_value(param, cmd_path, full_path, options, tree)
         elif cmd == 'act':
             if len(args) != 0 or options.set_name == '':
-                print >>sys.stderr, usage
+                print(usage, file=sys.stderr)
                 return 1, []
             activate_set(cmd_path, full_path, options, tree)
         else:
-            print >>sys.stderr, usage
+            print(usage, file=sys.stderr)
             return 1, []
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1, []
     return 0, result
 
diff --git a/rtshell/rtcryo.py b/rtshell/rtcryo.py
index d8377fb..f8153ad 100644
--- a/rtshell/rtcryo.py
+++ b/rtshell/rtcryo.py
@@ -35,7 +35,7 @@ import rtsprofile.targets
 import sys
 import traceback
 
-import option_store
+from . import option_store
 import rtshell
 
 
@@ -281,8 +281,8 @@ Record a running RT System in an RTSProfile specification.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError: ', e
+    except optparse.OptionError as e:
+        print('OptionError: ', e, file=sys.stderr)
         return 1
     option_store.OptionStore().verbose = options.verbose
 
@@ -290,10 +290,10 @@ Record a running RT System in an RTSProfile specification.'''
         freeze_dry(args, dest=options.output, xml=options.xml,
                 abstract=options.abstract, vendor=options.vendor,
                 sysname=options.sysname, version=options.version, tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(sys.argv[0], e)
+        print('{0}: {1}'.format(sys.argv[0], e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtcwd.py b/rtshell/rtcwd.py
index bcea8ea..af54b66 100644
--- a/rtshell/rtcwd.py
+++ b/rtshell/rtcwd.py
@@ -27,8 +27,8 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 
 if sys.platform == 'win32':
     SET_CMD = 'set'
@@ -69,7 +69,7 @@ def main(argv=None, tree=None):
         sys.argv = [sys.argv[0]] + argv
     if len(sys.argv) < 2:
         # Change to the root dir
-        print '{0} {1}{3}{2}/{2}'.format(SET_CMD, path.ENV_VAR, QUOTE, EQUALS)
+        print('{0} {1}{3}{2}/{2}'.format(SET_CMD, path.ENV_VAR, QUOTE, EQUALS))
         return 0
 
     # Take the first argument only
@@ -79,9 +79,9 @@ def main(argv=None, tree=None):
         if cmd_path == '.' or cmd_path == './':
             # Special case for '.': do nothing
             if path.ENV_VAR in os.environ:
-                print make_cmd_line(os.environ[path.ENV_VAR])
+                print(make_cmd_line(os.environ[path.ENV_VAR]))
             else:
-                print make_cmd_line('/')
+                print(make_cmd_line('/'))
         elif cmd_path == '..' or cmd_path == '../':
             # Special case for '..': go up one directory
             if path.ENV_VAR in os.environ and os.environ[path.ENV_VAR] and \
@@ -90,14 +90,14 @@ def main(argv=None, tree=None):
                         :os.environ[path.ENV_VAR].rstrip('/').rfind('/')]
                 if not parent:
                     parent = '/'
-                print make_cmd_line(parent)
+                print(make_cmd_line(parent))
             else:
-                print make_cmd_line('/')
+                print(make_cmd_line('/'))
         else:
             full_path = path.cmd_path_to_full_path(cmd_path)
-            print cd(cmd_path, full_path)
-    except Exception, e:
-        print >>sys.stderr, 'rtcwd: {0}'.format(e)
+            print(cd(cmd_path, full_path))
+    except Exception as e:
+        print('rtcwd: {0}'.format(e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtdeact.py b/rtshell/rtdeact.py
index 26d209f..8763772 100644
--- a/rtshell/rtdeact.py
+++ b/rtshell/rtdeact.py
@@ -19,7 +19,7 @@ Implementation of the command to move a component to the inactive state.
 '''
 
 
-import state_control_base
+from . import state_control_base
 
 
 def deactivate_action(object, ec_index):
diff --git a/rtshell/rtdel.py b/rtshell/rtdel.py
index 08f45de..21437da 100644
--- a/rtshell/rtdel.py
+++ b/rtshell/rtdel.py
@@ -27,8 +27,8 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
@@ -68,10 +68,10 @@ def delete_all_zombies(options, tree=None):
     def del_zombie(node, args):
         try:
             node.parent.unbind(node.name)
-        except Exception, e:
+        except Exception as e:
             if options.verbose:
                 traceback.print_exc()
-            print >>sys.stderr, '{0}: {1}'.format(sys.argv[0], e)
+            print('{0}: {1}'.format(sys.argv[0], e), file=sys.stderr)
     tree.iterate(del_zombie, filter=['is_zombie'])
 
 
@@ -90,14 +90,14 @@ Delete an object from a name server.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     try:
         if not args:
             if not options.zombies:
-                print >>sys.stderr, '{0}: No path given.'.format(sys.argv[0])
+                print('{0}: No path given.'.format(sys.argv[0]), file=sys.stderr)
                 return 1
             else:
                 # If no path given, delete all zombies found
@@ -106,17 +106,17 @@ Delete an object from a name server.'''
             full_path = path.cmd_path_to_full_path(args[0])
             # Some sanity checks
             if full_path == '/':
-                print >>sys.stderr, '{0}: Cannot delete the root '\
-                        'directory.'.format(sys.argv[0])
+                print('{0}: Cannot delete the root '\
+                        'directory.'.format(sys.argv[0]), file=sys.stderr)
                 return 1
             delete_object_reference(args[0], full_path, options, tree)
         else:
-            print >>sys.stderr, usage
+            print(usage, file=sys.stderr)
             return 1
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtdis.py b/rtshell/rtdis.py
index 15b114a..62f73ec 100644
--- a/rtshell/rtdis.py
+++ b/rtshell/rtdis.py
@@ -27,8 +27,8 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
@@ -75,14 +75,14 @@ def disconnect_all(cmd_path, full_path, options, tree=None):
 
 
 def disconnect_ports(paths, options, tree=None):
-    cmd_paths, fps = zip(*paths)
+    cmd_paths, fps = list(zip(*paths))
     pathports = [rtctree.path.parse_path(fp) for fp in fps]
     for ii, p in enumerate(pathports):
         if not p[1]:
             raise rts_exceptions.NotAPortError(cmd_paths[ii])
         if not p[0][-1]:
             raise rts_exceptions.NotAPortError(cmd_paths[ii])
-    paths, ports = zip(*pathports)
+    paths, ports = list(zip(*pathports))
 
     if not tree:
         tree = rtctree.tree.RTCTree(paths=paths, filter=paths)
@@ -133,8 +133,8 @@ Remove connections.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     try:
@@ -148,12 +148,12 @@ Remove connections.'''
             paths = [(p, path.cmd_path_to_full_path(p)) for p in args]
             disconnect_ports(paths, options, tree)
         else:
-            print >>sys.stderr, usage
+            print(usage, file=sys.stderr)
             return 1
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtdoc.py b/rtshell/rtdoc.py
index 2511570..80a77fd 100644
--- a/rtshell/rtdoc.py
+++ b/rtshell/rtdoc.py
@@ -27,8 +27,8 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
@@ -86,8 +86,8 @@ def get_config_docs(comp):
     return result
 
 
-from rtstodot import port_name as dot_port_name
-from rtstodot import escape as dot_escape
+from .rtstodot import port_name as dot_port_name
+from .rtstodot import escape as dot_escape
 
 def make_comp_graph(comp):
     result = []
@@ -163,7 +163,7 @@ def get_comp_docs(comp, tree, options):
         doc_set = comp.conf_sets['__doc__']
         if doc_set.has_param('__order__') and doc_set.data['__order__']:
             order = doc_set.data['__order__'].split(',')
-        sections += [k for k in doc_set.data.keys() if not k.startswith('__')]
+        sections += [k for k in list(doc_set.data.keys()) if not k.startswith('__')]
 
     if doc_set:
         if doc_set.has_param('__license__'):
@@ -181,8 +181,8 @@ def get_comp_docs(comp, tree, options):
     for s in order:
         if s not in sections:
             if doc_set:
-                print >>sys.stderr, ('{0}: Unknown section in order: '
-                    '{1}'.format(os.path.basename(sys.argv[0]), s))
+                print(('{0}: Unknown section in order: '
+                    '{1}'.format(os.path.basename(sys.argv[0]), s)), file=sys.stderr)
             continue
         do_section(result, comp, doc_set, s, options)
 
@@ -236,32 +236,32 @@ Display component documentation.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if not args:
         # If no path given then can't do anything.
-        print >>sys.stderr, '{0}: No component specified.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: No component specified.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1
     elif len(args) == 1:
         cmd_path = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
     full_path = path.cmd_path_to_full_path(cmd_path)
 
     try:
         docs = '\n'.join(get_docs(cmd_path, full_path, options, tree=tree))
         if options.format == 'rst':
-            print docs
+            print(docs)
         else:
-            print docutils.core.publish_string(docs, writer_name=options.format)
-    except Exception, e:
+            print(docutils.core.publish_string(docs, writer_name=options.format))
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtexit.py b/rtshell/rtexit.py
index fd8c6fc..c78180a 100644
--- a/rtshell/rtexit.py
+++ b/rtshell/rtexit.py
@@ -28,8 +28,8 @@ import RTC
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
@@ -69,28 +69,28 @@ Make a component exit.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if not args:
         # If no path given then can't do anything.
-        print >>sys.stderr, '{0}: No component specified.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: No component specified.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1
     elif len(args) == 1:
         cmd_path = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
     full_path = path.cmd_path_to_full_path(cmd_path)
 
     try:
         exit_target(cmd_path, full_path, options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtfind.py b/rtshell/rtfind.py
index 0264c7d..e7164bc 100644
--- a/rtshell/rtfind.py
+++ b/rtshell/rtfind.py
@@ -28,8 +28,8 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
@@ -145,24 +145,24 @@ Find entries in the RTC tree matching given constraints.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1, []
 
     if len(args) == 1:
         cmd_path = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1, []
     full_path = path.cmd_path_to_full_path(cmd_path)
 
     matches = []
     try:
         matches = search(cmd_path, full_path, options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1, []
     return 0, matches
 
diff --git a/rtshell/rtinject.py b/rtshell/rtinject.py
index 428d139..a9d0d02 100644
--- a/rtshell/rtinject.py
+++ b/rtshell/rtinject.py
@@ -30,11 +30,11 @@ import traceback
 import OpenRTM_aist
 import RTC
 
-import comp_mgmt
-import modmgr
-import path
-import port_types
-import rtinject_comp
+from . import comp_mgmt
+from . import modmgr
+from . import path
+from . import port_types
+from . import rtinject_comp
 import rtshell
 
 
@@ -44,25 +44,24 @@ def write_to_ports(raw_paths, options, tree=None):
     mm = modmgr.ModuleMgr(verbose=options.verbose, paths=options.paths)
     mm.load_mods_and_poas(options.modules)
     if options.verbose:
-        print >>sys.stderr, \
-                'Pre-loaded modules: {0}'.format(mm.loaded_mod_names)
+        print('Pre-loaded modules: {0}'.format(mm.loaded_mod_names), file=sys.stderr)
 
     if options.const:
         val = mm.evaluate(options.const)
         if options.verbose:
-            print >>sys.stderr, 'Evaluated value to {0}'.format(val)
+            print('Evaluated value to {0}'.format(val), file=sys.stderr)
     else:
         if options.verbose:
-            print >>sys.stderr, 'Reading values from stdin.'
+            print('Reading values from stdin.', file=sys.stderr)
 
     if options.timeout == -1:
         max = options.max
         if options.verbose:
-            print >>sys.stderr, 'Will run {0} times.'.format(max)
+            print('Will run {0} times.'.format(max), file=sys.stderr)
     else:
         max = -1
         if options.verbose:
-            print >>sys.stderr, 'Will stop after {0}s'.format(options.timeout)
+            print('Will stop after {0}s'.format(options.timeout), file=sys.stderr)
 
     targets = port_types.parse_targets(raw_paths)
     if not tree:
@@ -71,8 +70,7 @@ def write_to_ports(raw_paths, options, tree=None):
     port_specs = port_types.make_port_specs(targets, mm, tree)
     port_types.require_all_output(port_specs)
     if options.verbose:
-        print >>sys.stderr, \
-                'Port specifications: {0}'.format([str(p) for p in port_specs])
+        print('Port specifications: {0}'.format([str(p) for p in port_specs]), file=sys.stderr)
 
     if options.const:
         comp_name, mgr = comp_mgmt.make_comp('rtinject_writer', tree,
@@ -85,7 +83,7 @@ def write_to_ports(raw_paths, options, tree=None):
                 rtinject_comp.StdinWriter, port_specs, event=event,
                 rate=options.rate, max=max, buf=buffer, mutex=mutex)
     if options.verbose:
-        print >>sys.stderr, 'Created component {0}'.format(comp_name)
+        print('Created component {0}'.format(comp_name), file=sys.stderr)
     comp = comp_mgmt.find_comp_in_mgr(comp_name, mgr)
     comp_mgmt.connect(comp, port_specs, tree)
     comp_mgmt.activate(comp)
@@ -96,7 +94,7 @@ def write_to_ports(raw_paths, options, tree=None):
             elif options.max > -1:
                 event.wait()
             else:
-                raw_input()
+                input()
         except KeyboardInterrupt:
             pass
         except EOFError:
@@ -165,21 +163,21 @@ Write a constant value to one or more ports.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if len(args) < 1:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         write_to_ports([path.cmd_path_to_full_path(p) \
                 for p in args], options, tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtinject_comp.py b/rtshell/rtinject_comp.py
index 36ad2b2..77930aa 100644
--- a/rtshell/rtinject_comp.py
+++ b/rtshell/rtinject_comp.py
@@ -19,7 +19,7 @@ Writer component used by rtinject
 '''
 
 
-import gen_comp
+from . import gen_comp
 
 import OpenRTM_aist
 import RTC
@@ -35,7 +35,7 @@ class Writer(gen_comp.GenComp):
         self._val = val
 
     def _behv(self, ec_id):
-        for p in self._ports.values():
+        for p in list(self._ports.values()):
             p.port.write(self._val)
         return RTC.RTC_OK, 1
 
diff --git a/rtshell/rtlog.py b/rtshell/rtlog.py
index fc6af47..002a333 100644
--- a/rtshell/rtlog.py
+++ b/rtshell/rtlog.py
@@ -31,15 +31,15 @@ import traceback
 import OpenRTM_aist
 import RTC
 
-import comp_mgmt
-import modmgr
-import path
-import port_types
-import rtlog_comps
-import rts_exceptions
+from . import comp_mgmt
+from . import modmgr
+from . import path
+from . import port_types
+from . import rtlog_comps
+from . import rts_exceptions
 import rtshell
-import simpkl_log
-import text_log
+from . import simpkl_log
+from . import text_log
 
 
 def record_log(raw_paths, options, tree=None):
@@ -48,27 +48,26 @@ def record_log(raw_paths, options, tree=None):
     if options.end is not None and options.end < 0:
         raise rts_exceptions.BadEndPointError
     if options.end is None and options.index:
-        print >>sys.stderr, '{0}: WARNING: --index has no effect without '\
-                '--end'.format(os.path.basename(sys.argv[0]))
+        print('{0}: WARNING: --index has no effect without '\
+                '--end'.format(os.path.basename(sys.argv[0])), file=sys.stderr)
 
     mm = modmgr.ModuleMgr(verbose=options.verbose, paths=options.paths)
     mm.load_mods_and_poas(options.modules)
     if options.verbose:
-        print >>sys.stderr, \
-                'Pre-loaded modules: {0}'.format(mm.loaded_mod_names)
+        print('Pre-loaded modules: {0}'.format(mm.loaded_mod_names), file=sys.stderr)
 
     if options.timeout is not None:
-        print >>sys.stderr, 'Recording for {0}s.'.format(options.timeout)
+        print('Recording for {0}s.'.format(options.timeout), file=sys.stderr)
     else:
         if options.end is not None:
             if options.index:
-                print >>sys.stderr, 'Recording {0} entries.'.format(
-                        int(options.end))
+                print('Recording {0} entries.'.format(
+                        int(options.end)), file=sys.stderr)
             else:
                 end_str = time.strftime('%Y-%m-%d %H:%M:%S',
                         time.localtime(options.end))
-                print >>sys.stderr, 'Recording until {0} ({1}).'.format(
-                        end_str, options.end)
+                print('Recording until {0} ({1}).'.format(
+                        end_str, options.end), file=sys.stderr)
 
     if options.logger == 'simpkl':
         l_type = simpkl_log.SimplePickleLog
@@ -84,8 +83,7 @@ def record_log(raw_paths, options, tree=None):
     port_specs = port_types.make_port_specs(sources, mm, tree)
     port_types.require_all_input(port_specs)
     if options.verbose:
-        print >>sys.stderr, \
-                'Port specifications: {0}'.format([str(p) for p in port_specs])
+        print('Port specifications: {0}'.format([str(p) for p in port_specs]), file=sys.stderr)
 
     if options.end is None:
         end = -1 # Send -1 as the default
@@ -97,12 +95,12 @@ def record_log(raw_paths, options, tree=None):
             lims_are_ind=options.index, end=end,
             verbose=options.verbose, rate=options.exec_rate)
     if options.verbose:
-        print >>sys.stderr, 'Created component {0}'.format(comp_name)
+        print('Created component {0}'.format(comp_name), file=sys.stderr)
     try:
         comp = comp_mgmt.find_comp_in_mgr(comp_name, mgr)
         comp_mgmt.connect(comp, port_specs, tree)
         comp_mgmt.activate(comp)
-    except Exception, e:
+    except Exception as e:
         #comp_mgmt.shutdown(mgr)
         raise e
     try:
@@ -116,7 +114,7 @@ def record_log(raw_paths, options, tree=None):
             comp_mgmt.deactivate(comp)
         else:
             while True:
-                raw_input()
+                input()
             # The manager will catch the Ctrl-C and shut down itself, so don't
             # disconnect/deactivate the component
     except KeyboardInterrupt:
@@ -138,49 +136,48 @@ def play_log(raw_paths, options, tree=None):
     if options.end is not None and options.end < 0:
         raise rts_exceptions.BadEndPointError
     if options.end is None and options.start is None and options.index:
-        print >>sys.stderr, '{0}: WARNING: --index has no effect without '\
-                '--start or --end'.format(os.path.basename(sys.argv[0]))
+        print('{0}: WARNING: --index has no effect without '\
+                '--start or --end'.format(os.path.basename(sys.argv[0])), file=sys.stderr)
 
     mm = modmgr.ModuleMgr(verbose=options.verbose, paths=options.paths)
     mm.load_mods_and_poas(options.modules)
     if options.verbose:
-        print >>sys.stderr, \
-                'Pre-loaded modules: {0}'.format(mm.loaded_mod_names)
+        print('Pre-loaded modules: {0}'.format(mm.loaded_mod_names), file=sys.stderr)
 
     if options.timeout is not None:
-        print >>sys.stderr, 'Playing for {0}s.'.format(options.timeout)
+        print('Playing for {0}s.'.format(options.timeout), file=sys.stderr)
     else:
         if options.end is not None:
             if options.start is not None:
                 if options.index:
-                    print >>sys.stderr, 'Playing from entry {0} to entry '\
-                            '{1}.'.format(int(options.start), int(options.end))
+                    print('Playing from entry {0} to entry '\
+                            '{1}.'.format(int(options.start), int(options.end)), file=sys.stderr)
                 else:
                     start_str = time.strftime('%Y-%m-%d %H:%M:%S',
                             time.localtime(options.start))
                     end_str = time.strftime('%Y-%m-%d %H:%M:%S',
                             time.localtime(options.end))
-                    print >>sys.stderr, 'Playing from {0} ({1}) until {2} '\
+                    print('Playing from {0} ({1}) until {2} '\
                             '({3}).'.format(start_str, options.start, end_str,
-                                    options.end)
+                                    options.end), file=sys.stderr)
             else:
                 if options.index:
-                    print >>sys.stderr, 'Playing {0} entries.'.format(
-                            int(options.end))
+                    print('Playing {0} entries.'.format(
+                            int(options.end)), file=sys.stderr)
                 else:
                     end_str = time.strftime('%Y-%m-%d %H:%M:%S',
                             time.localtime(options.end))
-                    print >>sys.stderr, 'Playing until {0} ({1}).'.format(
-                            end_str, options.end)
+                    print('Playing until {0} ({1}).'.format(
+                            end_str, options.end), file=sys.stderr)
         elif options.start is not None:
             if options.index:
-                print >>sys.stderr, 'Playing from entry {0}.'.format(
-                        int(options.start))
+                print('Playing from entry {0}.'.format(
+                        int(options.start)), file=sys.stderr)
             else:
                 start_str = time.strftime('%Y-%m-%d %H:%M:%S',
                         time.localtime(options.start))
-                print >>sys.stderr, 'Playing from {0} ({1}).'.format(start_str,
-                        options.start)
+                print('Playing from {0} ({1}).'.format(start_str,
+                        options.start), file=sys.stderr)
 
     if options.logger == 'simpkl':
         l_type = simpkl_log.SimplePickleLog
@@ -195,8 +192,7 @@ def play_log(raw_paths, options, tree=None):
         tree = rtctree.tree.RTCTree(paths=paths, filter=paths)
     port_specs = port_types.make_port_specs(targets, mm, tree)
     if options.verbose:
-        print >>sys.stderr, \
-                'Port specifications: {0}'.format([str(p) for p in port_specs])
+        print('Port specifications: {0}'.format([str(p) for p in port_specs]), file=sys.stderr)
     port_types.require_all_output(port_specs)
 
     if options.start is None:
@@ -214,7 +210,7 @@ def play_log(raw_paths, options, tree=None):
             ignore_times=options.ig_times, verbose=options.verbose,
             rate=options.exec_rate)
     if options.verbose:
-        print >>sys.stderr, 'Created component {0}'.format(comp_name)
+        print('Created component {0}'.format(comp_name), file=sys.stderr)
     comp = comp_mgmt.find_comp_in_mgr(comp_name, mgr)
     comp_mgmt.connect(comp, port_specs, tree)
     comp_mgmt.activate(comp)
@@ -266,8 +262,7 @@ def display_info(options):
     mm = modmgr.ModuleMgr(verbose=options.verbose, paths=options.paths)
     mm.load_mods_and_poas(options.modules)
     if options.verbose:
-        print >>sys.stderr, \
-                'Pre-loaded modules: {0}'.format(mm.loaded_mod_names)
+        print('Pre-loaded modules: {0}'.format(mm.loaded_mod_names), file=sys.stderr)
 
     statinfo = os.stat(options.filename)
     size = statinfo.st_size
@@ -291,19 +286,19 @@ def display_info(options):
     end_time_str = time.strftime('%Y-%m-%d %H:%M:%S',
             time.localtime(end_time.float))
 
-    print 'Name: {0}'.format(options.filename)
-    print 'Size: ' + size_str
-    print 'Start time: {0} ({1})'.format(start_time_str, start_time)
-    print 'First entry time: {0} ({1})'.format(first_time_str, first_time)
-    print 'End time: {0} ({1})'.format(end_time_str, end_time)
-    print 'Number of entries: {0}'.format(end_ind + 1)
+    print('Name: {0}'.format(options.filename))
+    print('Size: ' + size_str)
+    print('Start time: {0} ({1})'.format(start_time_str, start_time))
+    print('First entry time: {0} ({1})'.format(first_time_str, first_time))
+    print('End time: {0} ({1})'.format(end_time_str, end_time))
+    print('Number of entries: {0}'.format(end_ind + 1))
     for ii, p in enumerate(port_specs):
-        print 'Channel {0}'.format(ii + 1)
-        print '  Name: {0}'.format(p.name)
-        print '  Data type: {0} ({1})'.format(p.type_name, p.type)
-        print '  Sources:'
+        print('Channel {0}'.format(ii + 1))
+        print('  Name: {0}'.format(p.name))
+        print('  Data type: {0} ({1})'.format(p.type_name, p.type))
+        print('  Sources:')
         for r in p.raw:
-            print '    {0}'.format(r)
+            print('    {0}'.format(r))
 
 
 def main(argv=None, tree=None):
@@ -377,12 +372,12 @@ Record data from output ports, or replay data into input ports.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if len(args) < 1 and not options.display_info:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
@@ -394,10 +389,10 @@ Record data from output ports, or replay data into input ports.'''
         else:
             record_log([path.cmd_path_to_full_path(p) for p in args],
                     options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtlog_comps.py b/rtshell/rtlog_comps.py
index 0e8b5a0..7926b8e 100644
--- a/rtshell/rtlog_comps.py
+++ b/rtshell/rtlog_comps.py
@@ -26,9 +26,9 @@ import sys
 import time
 import traceback
 
-import gen_comp
-import ilog
-import rts_exceptions
+from . import gen_comp
+from . import ilog
+from . import rts_exceptions
 
 
 ###############################################################################
@@ -145,41 +145,41 @@ class Player(gen_comp.GenComp):
             for name in self._ports:
                 matches = [s for s in log_port_specs if s.name == name]
                 if len(matches) == 0:
-                    print >>sys.stderr, 'WARNING: Port {0} not found in '\
-                            'log.'.format(name)
+                    print('WARNING: Port {0} not found in '\
+                            'log.'.format(name), file=sys.stderr)
                     continue
                 elif len(matches) != 1:
-                    print >>sys.stderr, 'WARNING: Port {0} occurs multiple '\
-                            'times in the log.'.format(name)
+                    print('WARNING: Port {0} occurs multiple '\
+                            'times in the log.'.format(name), file=sys.stderr)
                     continue
                 m = matches[0]
                 if m.type != self._ports[name].raw.type:
-                    print >>sys.stderr, 'ERROR: Port {0} is incorrect data '\
+                    print('ERROR: Port {0} is incorrect data '\
                             'type; should be {1}.'.format(name,
-                                    type(self._ports[name].data))
+                                    type(self._ports[name].data)), file=sys.stderr)
                     self._set()
                     return RTC.RTC_ERROR
 
             # Sanity-check the end time
             if self._end >= 0 and self._end < self._l.start[1]:
-                print >>sys.stderr, 'WARNING: Specified end time is before '\
-                        'the first entry time.'
+                print('WARNING: Specified end time is before '\
+                        'the first entry time.', file=sys.stderr)
 
             self._start_time = time.time()
             # Fast-forward to the start time (with a sanity-check)
             if self._start > 0: # If 0 index, already there; if 0 time... hmm
                 if self._lims_ind:
                     if self._start > self._l.end[0]:
-                        print >>sys.stderr, 'ERROR: Specified start index is '\
-                                'after the last entry index.'
+                        print('ERROR: Specified start index is '\
+                                'after the last entry index.', file=sys.stderr)
                         self._set()
                         return RTC.RTC_ERROR
                     self._l.seek(index=self._start)
                     self._log_start = self._l.pos[1].float
                 else:
                     if self._start > self._l.end[1]:
-                        print >>sys.stderr, 'ERROR: Specified start time is '\
-                                'after the last entry time.'
+                        print('ERROR: Specified start time is '\
+                                'after the last entry time.', file=sys.stderr)
                         self._set()
                         return RTC.RTC_ERROR
                     self._l.seek(timestamp=self._start)
@@ -209,8 +209,8 @@ class Player(gen_comp.GenComp):
                 for ii in range(int(self._rate)):
                     self._vprint('Playing {0} entries.'.format(int(self._rate)))
                     if not self._pub_log_item():
-                        print >>sys.stderr, '{0}: End of log reached.'.format(
-                                os.path.basename(sys.argv[0]))
+                        print('{0}: End of log reached.'.format(
+                                os.path.basename(sys.argv[0])), file=sys.stderr)
                         self._set()
                         result = RTC.RTC_ERROR
                     else:
@@ -239,8 +239,8 @@ class Player(gen_comp.GenComp):
                         self._set()
                         break
                     if not self._pub_log_item():
-                        print >>sys.stderr, '{0}: End of log reached.'.format(
-                                os.path.basename(sys.argv[0]))
+                        print('{0}: End of log reached.'.format(
+                                os.path.basename(sys.argv[0])), file=sys.stderr)
                         self._set()
                         result = RTC.RTC_ERROR
                         break
@@ -267,5 +267,5 @@ class Player(gen_comp.GenComp):
 
     def _vprint(self, text):
         if self._verb:
-            print >>sys.stderr, text
+            print(text, file=sys.stderr)
 
diff --git a/rtshell/rtls.py b/rtshell/rtls.py
index 140b922..d2995d9 100644
--- a/rtshell/rtls.py
+++ b/rtshell/rtls.py
@@ -28,8 +28,8 @@ import rtctree.utils
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
@@ -208,7 +208,7 @@ def format_items_list(items):
 def list_directory(dir_node, long=False):
     listing = dir_node.children
     use_colour = rtctree.utils.colour_supported(sys.stdout)
-    if long:
+    if int:
         lines = get_node_long_lines(listing, use_colour=use_colour)
         return lines
     else:
@@ -328,8 +328,8 @@ List a name server, directory, manager or component.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1, []
 
     if not args:
@@ -337,17 +337,17 @@ List a name server, directory, manager or component.'''
     elif len(args) == 1:
         cmd_path = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1, []
     full_path = path.cmd_path_to_full_path(cmd_path)
 
     result = []
     try:
         result = list_target(cmd_path, full_path, options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1, []
     return 0, result
 
diff --git a/rtshell/rtmgr.py b/rtshell/rtmgr.py
index 9732494..aa8764b 100644
--- a/rtshell/rtmgr.py
+++ b/rtshell/rtmgr.py
@@ -36,8 +36,8 @@ import sys
 import traceback
 
 import rtshell
-import rts_exceptions
-import path
+from . import rts_exceptions
+from . import path
 
 
 class DirectManager(object):
@@ -56,7 +56,7 @@ class DirectManager(object):
             raise rts_exceptions.BadMgrAddressError
         try:
             self._mgr = self._obj._narrow(RTM.Manager)
-        except omniORB.CORBA.TRANSIENT, e:
+        except omniORB.CORBA.TRANSIENT as e:
             if e.args[0] == omniORB.TRANSIENT_ConnectFailed:
                 raise rts_exceptions.BadMgrAddressError
             else:
@@ -88,7 +88,7 @@ class DirectManager(object):
         try:
             if self._mgr.load_module(path, init_func) != RTC.RTC_OK:
                 raise rtctree.exceptions.FailedToLoadModuleError(path)
-        except omniORB.CORBA.UNKNOWN, e:
+        except omniORB.CORBA.UNKNOWN as e:
             if e.args[0] == UNKNOWN_UserException:
                 raise rtctree.exceptions.FailedToLoadModuleError(path,
                         'CORBA User Exception')
@@ -191,8 +191,8 @@ Create and remove components with a manager.'''
     options, args = parser.parse_args()
 
     if len(args) != 1:
-        print >>sys.stderr, '{0}: No manager specified.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: No manager specified.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1
 
     try:
@@ -205,16 +205,16 @@ Create and remove components with a manager.'''
             tree, mgr = get_manager(args[0], full_path, tree)
 
         if not hasattr(options, 'cmds'):
-            print >>sys.stderr, '{0}: No commands specified.'.format(
-                    os.path.basename(sys.argv[0]))
+            print('{0}: No commands specified.'.format(
+                    os.path.basename(sys.argv[0])), file=sys.stderr)
             return 1
 
         for c in options.cmds:
             c[0](mgr, c[1])
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtprint.py b/rtshell/rtprint.py
index 0718a51..0e7fd0c 100644
--- a/rtshell/rtprint.py
+++ b/rtshell/rtprint.py
@@ -30,11 +30,11 @@ import traceback
 import OpenRTM_aist
 import RTC
 
-import comp_mgmt
-import modmgr
-import path
-import port_types
-import rtprint_comp
+from . import comp_mgmt
+from . import modmgr
+from . import path
+from . import port_types
+from . import rtprint_comp
 import rtshell
 
 
@@ -44,16 +44,15 @@ def read_from_ports(raw_paths, options, tree=None):
     mm = modmgr.ModuleMgr(verbose=options.verbose, paths=options.paths)
     mm.load_mods_and_poas(options.modules)
     if options.verbose:
-        print >>sys.stderr, \
-                'Pre-loaded modules: {0}'.format(mm.loaded_mod_names)
+        print('Pre-loaded modules: {0}'.format(mm.loaded_mod_names), file=sys.stderr)
     if options.timeout == -1:
         max = options.max
         if options.verbose:
-            print >>sys.stderr, 'Will run {0} times.'.format(max)
+            print('Will run {0} times.'.format(max), file=sys.stderr)
     else:
         max = -1
         if options.verbose:
-            print >>sys.stderr, 'Will stop after {0}s'.format(options.timeout)
+            print('Will stop after {0}s'.format(options.timeout), file=sys.stderr)
 
     targets = port_types.parse_targets(raw_paths)
     if not tree:
@@ -62,14 +61,13 @@ def read_from_ports(raw_paths, options, tree=None):
     port_specs = port_types.make_port_specs(targets, mm, tree)
     port_types.require_all_input(port_specs)
     if options.verbose:
-        print >>sys.stderr, \
-                'Port specifications: {0}'.format([str(p) for p in port_specs])
+        print('Port specifications: {0}'.format([str(p) for p in port_specs]), file=sys.stderr)
 
     comp_name, mgr = comp_mgmt.make_comp('rtprint_reader', tree,
             rtprint_comp.Reader, port_specs, event=event, rate=options.rate,
             max=max)
     if options.verbose:
-        print >>sys.stderr, 'Created component {0}'.format(comp_name)
+        print('Created component {0}'.format(comp_name), file=sys.stderr)
     comp = comp_mgmt.find_comp_in_mgr(comp_name, mgr)
     comp_mgmt.connect(comp, port_specs, tree)
     comp_mgmt.activate(comp)
@@ -84,7 +82,7 @@ def read_from_ports(raw_paths, options, tree=None):
             comp_mgmt.deactivate(comp)
         else:
             while True:
-                raw_input()
+                input()
             # The manager will catch the Ctrl-C and shut down itself, so don't
             # disconnect/deactivate the component
     except KeyboardInterrupt:
@@ -127,21 +125,21 @@ Print the data being sent by one or more output ports.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if len(args) < 1:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         read_from_ports(
                 [path.cmd_path_to_full_path(p) for p in args], options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtprint_comp.py b/rtshell/rtprint_comp.py
index 57cb61c..b1afc30 100644
--- a/rtshell/rtprint_comp.py
+++ b/rtshell/rtprint_comp.py
@@ -19,7 +19,7 @@ Reader component used by rtprint
 '''
 
 
-import gen_comp
+from . import gen_comp
 import OpenRTM_aist
 import RTC
 
@@ -33,10 +33,10 @@ class Reader(gen_comp.GenComp):
 
     def _behv(self, ec_id):
         execed = 0
-        for p in self._ports.values():
+        for p in list(self._ports.values()):
             if p.port.isNew():
                 execed = 1
                 p.read()
-                print p.format()
+                print(p.format())
         return RTC.RTC_OK, execed
 
diff --git a/rtshell/rtreset.py b/rtshell/rtreset.py
index 8e49b4e..bebf77a 100644
--- a/rtshell/rtreset.py
+++ b/rtshell/rtreset.py
@@ -20,7 +20,7 @@ inactive state.
 '''
 
 
-import state_control_base
+from . import state_control_base
 
 
 def reset_action(object, ec_index):
diff --git a/rtshell/rtresurrect.py b/rtshell/rtresurrect.py
index ca3893f..39b55d3 100644
--- a/rtshell/rtresurrect.py
+++ b/rtshell/rtresurrect.py
@@ -28,8 +28,8 @@ import rtsprofile.rts_profile
 import sys
 import traceback
 
-import actions
-import option_store
+from . import actions
+from . import option_store
 import rtshell
 
 
@@ -225,7 +225,7 @@ def resurrect(profile=None, xml=True, dry_run=False, tree=None):
     actions = rebuild_system_actions(rtsp)
     if dry_run:
         for a in actions:
-            print a
+            print(a)
     else:
         if not tree:
             # Load the RTC Tree, using the paths from the profile
@@ -254,8 +254,8 @@ Recreate an RT system using an RTSProfile.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError: ', e
+    except optparse.OptionError as e:
+        print('OptionError: ', e, file=sys.stderr)
         return 1
     option_store.OptionStore().verbose = options.verbose
 
@@ -264,16 +264,16 @@ Recreate an RT system using an RTSProfile.'''
     elif len(args) == 1:
         profile = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         resurrect(profile=profile, xml=options.xml, dry_run=options.dry_run,
                 tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtstart.py b/rtshell/rtstart.py
index 110f544..65e6d12 100644
--- a/rtshell/rtstart.py
+++ b/rtshell/rtstart.py
@@ -29,10 +29,10 @@ import rtsprofile.rts_profile
 import sys
 import traceback
 
-import actions
-import option_store
-import plan
-import rts_exceptions
+from . import actions
+from . import option_store
+from . import plan
+from . import rts_exceptions
 import rtshell
 
 
@@ -89,8 +89,8 @@ def start(profile=None, xml=True, dry_run=False, tree=None):
             rtctree.component.Component.ACTIVE)
     if dry_run:
         for a in checks:
-            print a
-        print p
+            print(a)
+        print(p)
     else:
         if not tree:
             # Load the RTC Tree, using the paths from the profile
@@ -124,8 +124,8 @@ Start an RT system using an RTSProfile.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError: ', e
+    except optparse.OptionError as e:
+        print('OptionError: ', e, file=sys.stderr)
         return 1
     option_store.OptionStore().verbose = options.verbose
 
@@ -134,16 +134,16 @@ Start an RT system using an RTSProfile.'''
     elif len(args) == 1:
         profile = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         start(profile=profile, xml=options.xml, dry_run=options.dry_run,
                 tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtstodot.py b/rtshell/rtstodot.py
index 10fb640..71fcde7 100644
--- a/rtshell/rtstodot.py
+++ b/rtshell/rtstodot.py
@@ -127,8 +127,8 @@ Visualise RT Systems using dot files.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if not args:
@@ -136,16 +136,16 @@ Visualise RT Systems using dot files.'''
     elif len(args) == 1:
         profile = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         for l in visualise(profile=profile, xml=options.xml, tree=tree):
-            print l
-    except Exception, e:
+            print(l)
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtstop.py b/rtshell/rtstop.py
index 8eb12e7..34d33c0 100644
--- a/rtshell/rtstop.py
+++ b/rtshell/rtstop.py
@@ -29,10 +29,10 @@ import rtsprofile.rts_profile
 import sys
 import traceback
 
-import actions
-import option_store
-import plan
-import rts_exceptions
+from . import actions
+from . import option_store
+from . import plan
+from . import rts_exceptions
 import rtshell
 
 
@@ -68,7 +68,7 @@ def stop(profile=None, xml=True, dry_run=False, tree=None):
     p.make(rtsp, deactivates, rtsp.deactivation,
             rtctree.component.Component.INACTIVE)
     if dry_run:
-        print p
+        print(p)
     else:
         if not tree:
             # Load the RTC Tree, using the paths from the profile
@@ -76,7 +76,7 @@ def stop(profile=None, xml=True, dry_run=False, tree=None):
                 '/' + c.path_uri)[0] for c in rtsp.components])
         try:
             p.execute(tree)
-        except rts_exceptions.RequiredActionFailedError, e:
+        except rts_exceptions.RequiredActionFailedError as e:
             p.cancel()
             raise
 
@@ -100,8 +100,8 @@ Stop an RT system using an RTSProfile.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError: ', e
+    except optparse.OptionError as e:
+        print('OptionError: ', e, file=sys.stderr)
         return 1
     option_store.OptionStore().verbose = options.verbose
 
@@ -110,16 +110,16 @@ Stop an RT system using an RTSProfile.'''
     elif len(args) == 1:
         profile = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         stop(profile=profile, xml=options.xml, dry_run=options.dry_run,
                 tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtteardown.py b/rtshell/rtteardown.py
index e8428ee..18f20a3 100644
--- a/rtshell/rtteardown.py
+++ b/rtshell/rtteardown.py
@@ -28,8 +28,8 @@ import rtsprofile.rts_profile
 import sys
 import traceback
 
-import actions
-import option_store
+from . import actions
+from . import option_store
 import rtshell
 
 
@@ -90,7 +90,7 @@ def teardown(profile=None, xml=True, dry_run=False, tree=None):
     actions = disconnect_actions(rtsp)
     if dry_run:
         for a in actions:
-            print a
+            print(a)
     else:
         if not tree:
             # Load the RTC Tree, using the paths from the profile
@@ -119,8 +119,8 @@ Destroy an RT system using an RTSProfile.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError: ', e
+    except optparse.OptionError as e:
+        print('OptionError: ', e, file=sys.stderr)
         return 1
     option_store.OptionStore().verbose = options.verbose
 
@@ -130,16 +130,16 @@ Destroy an RT system using an RTSProfile.'''
     elif len(args) == 1:
         profile = args[0]
     else:
-        print >>sys.stderr, usage
+        print(usage, file=sys.stderr)
         return 1
 
     try:
         teardown(profile=profile, xml=options.xml, dry_run=options.dry_run,
                 tree=tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/rtvlog.py b/rtshell/rtvlog.py
index 46ec5ec..7d42722 100644
--- a/rtshell/rtvlog.py
+++ b/rtshell/rtvlog.py
@@ -29,13 +29,13 @@ import RTC
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
 def log_cb(rtc, time, source, level, msg):
-    print '[{0} {1}] {2} <{3}> {4}'.format(rtc, time, level, source, msg)
+    print('[{0} {1}] {2} <{3}> {4}'.format(rtc, time, level, source, msg))
 
 
 def print_logs(paths, options, tree=None):
@@ -66,7 +66,7 @@ def print_logs(paths, options, tree=None):
             id = rtc.add_logger(log_cb, level=options.level,
                     filters=filters)
             ids.append((rtc, id))
-    except rtctree.exceptions.AddLoggerError, e:
+    except rtctree.exceptions.AddLoggerError as e:
         # Remove all the loggers that were added
         for i in ids:
             i[0].remove_logger(i[1])
@@ -76,7 +76,7 @@ def print_logs(paths, options, tree=None):
     # Wait for a keyboard interrupt
     try:
         while True:
-            raw_input('')
+            input('')
     except KeyboardInterrupt:
         pass
     # Remove all the loggers that were added
@@ -103,23 +103,23 @@ View a component logs.'''
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if not args:
         # If no paths given then can't do anything.
-        print >>sys.stderr, '{0}: No component specified.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: No component specified.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1
     paths = [[p, path.cmd_path_to_full_path(p)] for p in args]
 
     try:
         print_logs(paths, options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/simpkl_log.py b/rtshell/simpkl_log.py
index 2a9b907..76769db 100644
--- a/rtshell/simpkl_log.py
+++ b/rtshell/simpkl_log.py
@@ -24,7 +24,7 @@ import os
 import pickle
 import traceback
 
-import ilog
+from . import ilog
 
 
 ###############################################################################
diff --git a/rtshell/state_control_base.py b/rtshell/state_control_base.py
index 4edc425..de17912 100644
--- a/rtshell/state_control_base.py
+++ b/rtshell/state_control_base.py
@@ -27,20 +27,20 @@ import rtctree.path
 import sys
 import traceback
 
-import path
-import rts_exceptions
+from . import path
+from . import rts_exceptions
 import rtshell
 
 
 def alter_component_states(action, paths, options, tree=None):
-    cmd_paths, fps = zip(*paths)
+    cmd_paths, fps = list(zip(*paths))
     pathports = [rtctree.path.parse_path(fp) for fp in fps]
     for ii, p in enumerate(pathports):
         if p[1]:
             raise rts_exceptions.NotAComponentError(cmd_paths[ii])
         if not p[0][-1]:
             raise rts_exceptions.NotAComponentError(cmd_paths[ii])
-    paths, ports = zip(*pathports)
+    paths, ports = list(zip(*pathports))
 
     if not tree:
         tree = rtctree.tree.RTCTree(paths=paths, filter=paths)
@@ -72,23 +72,23 @@ def base_main(description, action, argv=None, tree=None):
         sys.argv = [sys.argv[0]] + argv
     try:
         options, args = parser.parse_args()
-    except optparse.OptionError, e:
-        print >>sys.stderr, 'OptionError:', e
+    except optparse.OptionError as e:
+        print('OptionError:', e, file=sys.stderr)
         return 1
 
     if not args:
         # If no path given then can't do anything.
-        print >>sys.stderr, '{0}: No components specified.'.format(
-                os.path.basename(sys.argv[0]))
+        print('{0}: No components specified.'.format(
+                os.path.basename(sys.argv[0])), file=sys.stderr)
         return 1
     paths = [(p, path.cmd_path_to_full_path(p)) for p in args]
 
     try:
         alter_component_states(action, paths, options, tree)
-    except Exception, e:
+    except Exception as e:
         if options.verbose:
             traceback.print_exc()
-        print >>sys.stderr, '{0}: {1}'.format(os.path.basename(sys.argv[0]), e)
+        print('{0}: {1}'.format(os.path.basename(sys.argv[0]), e), file=sys.stderr)
         return 1
     return 0
 
diff --git a/rtshell/text_log.py b/rtshell/text_log.py
index 1e49f9d..132d238 100644
--- a/rtshell/text_log.py
+++ b/rtshell/text_log.py
@@ -22,7 +22,7 @@ Text-based log.
 import copy
 import os
 
-import ilog
+from . import ilog
 
 
 ###############################################################################
diff --git a/setup.py b/setup.py
index 3228d2d..be27e06 100644
--- a/setup.py
+++ b/setup.py
@@ -43,15 +43,15 @@ def get_files(dir, ext=None):
 
 if sys.platform != 'win32':
     cwd = os.path.join(os.getcwd(), 'doc')
-    s = raw_input('Generate documentation? ')
+    s = input('Generate documentation? ')
     if s.lower() == 'y' or s.lower() == 'YES':
-        print 'Generating documentation'
+        print('Generating documentation')
         p = subprocess.Popen(['./make_docs', 'man', 'html', 'pdf', '-v'],
                 stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd)
         stdout, stderr = p.communicate()
         if p.returncode != 0:
-            print 'Failed to generate documentation. Check docutils are installed.'
-            print stderr
+            print('Failed to generate documentation. Check docutils are installed.')
+            print(stderr)
 try:
     man_files_en = get_files(os.path.join(os.getcwd(), 'doc/man/man1'))
     html_files_en = get_files(os.path.join(os.getcwd(), 'doc/html'))
@@ -138,7 +138,7 @@ class InstallRename(install_scripts):
         install_scripts.run(self)
         if sys.platform == 'win32':
             # Rename the installed scripts to add .py on the end for Windows
-            print 'Renaming scripts'
+            print('Renaming scripts')
             for s in base_scripts:
                 dest = os.path.join(self.install_dir, s + '.py')
                 if os.path.exists(dest):
@@ -201,8 +201,8 @@ class InstallConfigure(install_data):
                 stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd)
         stdout, stderr = p.communicate()
         if p.returncode != 0:
-            print 'Failed to filter bash_completion.'
-            print stderr
+            print('Failed to filter bash_completion.')
+            print(stderr)
 
 
 setup(name='rtshell',
diff --git a/test/logfile_unittests.py b/test/logfile_unittests.py
index fa92793..1bbe0cf 100755
--- a/test/logfile_unittests.py
+++ b/test/logfile_unittests.py
@@ -71,17 +71,17 @@ class ReadBase(unittest.TestCase):
 class WriteTests(WriteBase):
     def test_write(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== write ====='
+            print('===== write =====', file=sys.stderr)
         for t, d in zip(TIMESTAMPS, DATA):
             self.log.write(t, d)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
 
 class ReadTests(ReadBase):
     def test_read_whole_log(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_whole_log ====='
+            print('===== read_whole_log =====', file=sys.stderr)
         for ii in range(10):
             entry = self.log.read()
             if not entry:
@@ -96,26 +96,26 @@ class ReadTests(ReadBase):
                     self.assertEqual(self.log.pos, (ii + 1, TIMESTAMPS[ii + 1]))
                 else:
                     self.assertEqual(self.log.pos, (ii + 1, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_start_at_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_start_at_start ====='
+            print('===== get_start_at_start =====', file=sys.stderr)
         self.assertEqual(self.log.start, (0, TIMESTAMPS[0]))
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_start_at_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_start_at_mid ====='
+            print('===== get_start_at_mid =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.start, (0, TIMESTAMPS[0]))
@@ -124,38 +124,38 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 5)
         self.assertEqual(ts, TIMESTAMPS[5])
         self.assertEqual(d, DATA[5])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_start_at_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_start_at_eof ====='
+            print('===== get_start_at_eof =====', file=sys.stderr)
         for ii in range(11):
             self.log.read()
         self.assertEqual(self.log.start, (0, TIMESTAMPS[0]))
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual(self.log.read(), [])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_end_at_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_end_at_start ====='
+            print('===== get_end_at_start =====', file=sys.stderr)
         self.assertEqual(self.log.end, (9, TIMESTAMPS[-1]))
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_end_at_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_end_at_mid ====='
+            print('===== get_end_at_mid =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.end, (9, TIMESTAMPS[-1]))
@@ -164,48 +164,48 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 5)
         self.assertEqual(ts, TIMESTAMPS[5])
         self.assertEqual(d, DATA[5])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_end_at_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_end_at_eof ====='
+            print('===== get_end_at_eof =====', file=sys.stderr)
         for ii in range(11):
             self.log.read()
         self.assertEqual(self.log.end, (9, TIMESTAMPS[9]))
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual(self.log.read(), [])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_eof ====='
+            print('===== read_eof =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual(self.log.read(), [])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_start_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_start_mid ====='
+            print('===== read_num_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.assertEqual([], self.log.read(number=0))
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_start_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_start_mid ====='
+            print('===== read_num_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(number=4)
         self.assertEqual(4, len(d))
@@ -214,13 +214,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (4, TIMESTAMPS[4]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_start_end(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_start_mid ====='
+            print('===== read_num_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(number=10)
         self.assertEqual(10, len(d))
@@ -229,13 +229,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_start_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_start_mid ====='
+            print('===== read_num_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(number=11)
         self.assertEqual(10, len(d))
@@ -244,24 +244,24 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_mid_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_mid_start ====='
+            print('===== read_num_mid_start =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
         self.assertRaises(ValueError, self.log.read, number=-1)
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_mid_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_mid_mid ====='
+            print('===== read_num_mid_mid =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -272,13 +272,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii + 3])
             self.assertEqual(d[ii][2], DATA[ii + 3])
         self.assertEqual(self.log.pos, (7, TIMESTAMPS[7]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_mid_end(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_mid_end ====='
+            print('===== read_num_mid_end =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -289,13 +289,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii + 3])
             self.assertEqual(d[ii][2], DATA[ii + 3])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_mid_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_mid_eof ====='
+            print('===== read_num_mid_eof =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -306,25 +306,25 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii + 3])
             self.assertEqual(d[ii][2], DATA[ii + 3])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_num_end_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_num_end_eof ====='
+            print('===== read_num_end_eof =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read(number=2))
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_start_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_start_mid ====='
+            print('===== read_ts_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.assertEqual([], self.log.read(timestamp=0.1))
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
@@ -333,13 +333,13 @@ class ReadTests(ReadBase):
         self.assertEqual(d[0][1], TIMESTAMPS[0])
         self.assertEqual(d[0][2], DATA[0])
         self.assertEqual(self.log.pos, (1, TIMESTAMPS[1]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_start_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_start_mid ====='
+            print('===== read_ts_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(timestamp=1.3)
         self.assertEqual(4, len(d))
@@ -348,13 +348,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (4, TIMESTAMPS[4]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_start_mid_between(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_start_mid_between ====='
+            print('===== read_ts_start_mid_between =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(timestamp=1.45)
         self.assertEqual(4, len(d))
@@ -363,13 +363,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (4, TIMESTAMPS[4]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_start_end(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_start_mid ====='
+            print('===== read_ts_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(timestamp=5.3)
         self.assertEqual(10, len(d))
@@ -378,13 +378,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_start_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_start_mid ====='
+            print('===== read_ts_start_mid =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         d = self.log.read(timestamp=5.4)
         self.assertEqual(10, len(d))
@@ -393,25 +393,25 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii])
             self.assertEqual(d[ii][2], DATA[ii])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_mid_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_mid_start ====='
+            print('===== read_ts_mid_start =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
         self.assertRaises(ValueError, self.log.read, timestamp=-1)
         self.assertEqual([], self.log.read(timestamp=0.1))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_mid_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_mid_mid ====='
+            print('===== read_ts_mid_mid =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -422,13 +422,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii + 3])
             self.assertEqual(d[ii][2], DATA[ii + 3])
         self.assertEqual(self.log.pos, (7, TIMESTAMPS[7]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_mid_end(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_mid_end ====='
+            print('===== read_ts_mid_end =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -439,13 +439,13 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii + 3])
             self.assertEqual(d[ii][2], DATA[ii + 3])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_mid_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_mid_eof ====='
+            print('===== read_ts_mid_eof =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -456,26 +456,26 @@ class ReadTests(ReadBase):
             self.assertEqual(d[ii][1], TIMESTAMPS[ii + 3])
             self.assertEqual(d[ii][2], DATA[ii + 3])
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_read_ts_end_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== read_ts_end_eof ====='
+            print('===== read_ts_end_eof =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.assertEqual([], self.log.read(timestamp=5.4))
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_backup_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== backup_start ====='
+            print('===== backup_start =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log._backup_one()
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
@@ -484,13 +484,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
         self.assertEqual(self.log.pos, (1, TIMESTAMPS[1]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_backup_to_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== backup_to_start ====='
+            print('===== backup_to_start =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.read()
         self.assertEqual(self.log.pos, (1, TIMESTAMPS[1]))
@@ -509,13 +509,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
         self.assertEqual(self.log.pos, (1, TIMESTAMPS[1]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_backup_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== backup_mid ====='
+            print('===== backup_mid =====', file=sys.stderr)
         for ii in range(3):
             self.log.read()
         self.assertEqual(self.log.pos, (3, TIMESTAMPS[3]))
@@ -525,13 +525,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_backup_end(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== backup_end ====='
+            print('===== backup_end =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -541,31 +541,31 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 8)
         self.assertEqual(ts, TIMESTAMPS[8])
         self.assertEqual(d, DATA[8])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_backup_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== backup_eof ====='
+            print('===== backup_eof =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log._backup_one()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_rewind_at_start(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== rewind_at_start ====='
+            print('===== rewind_at_start =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.rewind()
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
@@ -573,13 +573,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_rewind_at_mid(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== rewind_at_mid ====='
+            print('===== rewind_at_mid =====', file=sys.stderr)
         for ii in range(4):
             self.log.read()
         self.assertEqual(self.log.pos, (4, TIMESTAMPS[4]))
@@ -589,13 +589,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_rewind_at_end(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== rewind_at_mid ====='
+            print('===== rewind_at_mid =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -605,31 +605,31 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_rewind_at_eof(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== rewind_at_mid ====='
+            print('===== rewind_at_mid =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.log.rewind()
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_start_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_start_ind ====='
+            print('===== seek_start_start_ind =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(index=0)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
@@ -637,13 +637,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_mid_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_mid_ind ====='
+            print('===== seek_start_mid_ind =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(index=2)
         self.assertEqual(self.log.pos, (2, TIMESTAMPS[2]))
@@ -651,13 +651,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_end_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_end_ind ====='
+            print('===== seek_start_end_ind =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(index=9)
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -665,24 +665,24 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_eof_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_eof_ind ====='
+            print('===== seek_start_eof_ind =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(index=11)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_start_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_start_ind ====='
+            print('===== seek_mid_start_ind =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -692,13 +692,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_rewind_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_rewind_ind ====='
+            print('===== seek_mid_rewind_ind =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -708,13 +708,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_mid_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_mid_ind ====='
+            print('===== seek_mid_mid_ind =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -724,13 +724,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 5)
         self.assertEqual(ts, TIMESTAMPS[5])
         self.assertEqual(d, DATA[5])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_ff_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_ff_ind ====='
+            print('===== seek_mid_ff_ind =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -740,13 +740,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 7)
         self.assertEqual(ts, TIMESTAMPS[7])
         self.assertEqual(d, DATA[7])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_end_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_end_ind ====='
+            print('===== seek_mid_end_ind =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -756,26 +756,26 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_eof_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_eof_ind ====='
+            print('===== seek_mid_eof_ind =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
         self.log.seek(index=10)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_start_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_start_ind ====='
+            print('===== seek_end_start_ind =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -785,13 +785,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_mid_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_mid_ind ====='
+            print('===== seek_end_mid_ind =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -801,109 +801,109 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_end_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_end_ind ====='
+            print('===== seek_end_end_ind =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
         self.log.seek(index=9)
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_eof_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_eof_ind ====='
+            print('===== seek_end_eof_ind =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
         self.log.seek(index=10)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_start_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_start_ind ====='
+            print('===== seek_eof_start_ind =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(index=0)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_mid_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_mid_ind ====='
+            print('===== seek_eof_mid_ind =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(index=2)
         self.assertEqual(self.log.pos, (2, TIMESTAMPS[2]))
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_end_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_end_ind ====='
+            print('===== seek_eof_end_ind =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(index=9)
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_eof_ind(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_eof_ind ====='
+            print('===== seek_eof_eof_ind =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(index=10)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_before_start_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_before_start_ts ====='
+            print('===== seek_start_before_start_ts =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(timestamp=TIMESTAMPS[0] - 1)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
@@ -911,13 +911,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_start_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_start_ts ====='
+            print('===== seek_start_start_ts =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(timestamp=TIMESTAMPS[0])
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
@@ -925,13 +925,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_before_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_before_mid_ts ====='
+            print('===== seek_start_before_mid_ts =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(timestamp=TIMESTAMPS[2] - \
                 (TIMESTAMPS[2] - TIMESTAMPS[1]) * 0.6)
@@ -940,13 +940,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_mid_ts ====='
+            print('===== seek_start_mid_ts =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(timestamp=TIMESTAMPS[2])
         self.assertEqual(self.log.pos, (2, TIMESTAMPS[2]))
@@ -954,13 +954,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_end_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_end_ts ====='
+            print('===== seek_start_end_ts =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(timestamp=TIMESTAMPS[9])
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -968,24 +968,24 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_start_eof_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_start_eof_ts ====='
+            print('===== seek_start_eof_ts =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         self.log.seek(timestamp=TIMESTAMPS[9] + 1)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_before_start_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_before_start_ts ====='
+            print('===== seek_mid_before_start_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -995,13 +995,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_start_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_start_ts ====='
+            print('===== seek_mid_start_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1011,13 +1011,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_rewind_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_rewind_ts ====='
+            print('===== seek_mid_rewind_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1027,13 +1027,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_before_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_before_mid_ts ====='
+            print('===== seek_mid_before_mid_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1044,13 +1044,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_mid_ts ====='
+            print('===== seek_mid_mid_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1060,13 +1060,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 5)
         self.assertEqual(ts, TIMESTAMPS[5])
         self.assertEqual(d, DATA[5])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_after_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_after_mid_ts ====='
+            print('===== seek_mid_after_mid_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1077,13 +1077,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 7)
         self.assertEqual(ts, TIMESTAMPS[7])
         self.assertEqual(d, DATA[7])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_ff_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_ff_ts ====='
+            print('===== seek_mid_ff_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1093,13 +1093,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 7)
         self.assertEqual(ts, TIMESTAMPS[7])
         self.assertEqual(d, DATA[7])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_end_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_end_ts ====='
+            print('===== seek_mid_end_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
@@ -1109,26 +1109,26 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_mid_eof_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_mid_eof_ts ====='
+            print('===== seek_mid_eof_ts =====', file=sys.stderr)
         for ii in range(5):
             self.log.read()
         self.assertEqual(self.log.pos, (5, TIMESTAMPS[5]))
         self.log.seek(timestamp=TIMESTAMPS[9] + 1)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_start_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_start_ts ====='
+            print('===== seek_end_start_ts =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -1138,13 +1138,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_before_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_before_mid_ts ====='
+            print('===== seek_end_before_mid_ts =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -1155,13 +1155,13 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_mid_ts ====='
+            print('===== seek_end_mid_ts =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
@@ -1171,64 +1171,64 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_end_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_end_ts ====='
+            print('===== seek_end_end_ts =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
         self.log.seek(timestamp=TIMESTAMPS[9])
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_end_eof_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_end_eof_ts ====='
+            print('===== seek_end_eof_ts =====', file=sys.stderr)
         for ii in range(9):
             self.log.read()
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
         self.log.seek(timestamp=TIMESTAMPS[9] + 1)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_start_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_start_ts ====='
+            print('===== seek_eof_start_ts =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[9]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(timestamp=TIMESTAMPS[0])
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 0)
         self.assertEqual(ts, TIMESTAMPS[0])
         self.assertEqual(d, DATA[0])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_before_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_before_mid_ts ====='
+            print('===== seek_eof_before_mid_ts =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(timestamp=TIMESTAMPS[2] - \
                 (TIMESTAMPS[2] - TIMESTAMPS[1]) * 0.6)
         self.assertEqual(self.log.pos, (2, TIMESTAMPS[2]))
@@ -1236,62 +1236,62 @@ class ReadTests(ReadBase):
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_mid_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_mid_ts ====='
+            print('===== seek_eof_mid_ts =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(timestamp=TIMESTAMPS[2])
         self.assertEqual(self.log.pos, (2, TIMESTAMPS[2]))
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 2)
         self.assertEqual(ts, TIMESTAMPS[2])
         self.assertEqual(d, DATA[2])
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_end_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_end_ts ====='
+            print('===== seek_eof_end_ts =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(timestamp=TIMESTAMPS[9])
         self.assertEqual(self.log.pos, (9, TIMESTAMPS[9]))
-        self.assert_(not self.log.eof)
+        self.assertTrue(not self.log.eof)
         ind, ts, d = self.log.read()[0]
         self.assertEqual(ind, 9)
         self.assertEqual(ts, TIMESTAMPS[9])
         self.assertEqual(d, DATA[9])
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_seek_eof_eof_ts(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== seek_eof_eof_ts ====='
+            print('===== seek_eof_eof_ts =====', file=sys.stderr)
         for ii in range(10):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.seek(timestamp=TIMESTAMPS[9] + 1)
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
         self.assertEqual([], self.log.read())
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_get_cur_pos(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== get_cur_pos ====='
+            print('===== get_cur_pos =====', file=sys.stderr)
         self.assertEqual(self.log.pos, (0, TIMESTAMPS[0]))
         for ii in range(4):
             self.log.read()
@@ -1299,12 +1299,12 @@ class ReadTests(ReadBase):
         for ii in range(6):
             self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         self.log.read()
         self.assertEqual(self.log.pos, (10, TIMESTAMPS[-1]))
-        self.assert_(self.log.eof)
+        self.assertTrue(self.log.eof)
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
 
 
@@ -1325,7 +1325,7 @@ class OtherTests(unittest.TestCase):
 
     def test_with(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== with ====='
+            print('===== with =====', file=sys.stderr)
         with rtshell.simpkl_log.SimplePickleLog(filename='test.log',
                 mode='r', meta=METADATA, verbose=VERBOSITY) as log:
             for ii in range(10):
@@ -1343,11 +1343,11 @@ class OtherTests(unittest.TestCase):
                     else:
                         self.assertEqual(log.pos, (ii + 1, TIMESTAMPS[-1]))
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
     def test_iterator(self):
         if VERBOSITY:
-            print >>sys.stderr, '===== iterator ====='
+            print('===== iterator =====', file=sys.stderr)
         log = rtshell.simpkl_log.SimplePickleLog(filename='test.log',
                 mode='r', meta=METADATA, verbose=VERBOSITY)
         for (ii, entry) in enumerate(log):
@@ -1365,7 +1365,7 @@ class OtherTests(unittest.TestCase):
                     self.assertEqual(log.pos, (ii + 1, TIMESTAMPS[-1]))
         log.close()
         if VERBOSITY:
-            print >>sys.stderr, '===== ===== ====='
+            print('===== ===== =====', file=sys.stderr)
 
 
 class TimestampTests(unittest.TestCase):
diff --git a/test/test_cmds.py b/test/test_cmds.py
index aa4c72e..b997c87 100755
--- a/test/test_cmds.py
+++ b/test/test_cmds.py
@@ -363,20 +363,20 @@ class rtcatTests(unittest.TestCase):
     def test_rtc(self):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/Std0.rtc'])
-        self.assert_(stdout.startswith('Std0.rtc'))
-        self.assert_('Inactive' in stdout)
-        self.assert_('Category' in stdout)
-        self.assert_('Execution Context' in stdout)
-        self.assert_('DataInPort: in' in stdout)
+        self.assertTrue(stdout.startswith('Std0.rtc'))
+        self.assertTrue('Inactive' in stdout)
+        self.assertTrue('Category' in stdout)
+        self.assertTrue('Execution Context' in stdout)
+        self.assertTrue('DataInPort: in' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
     def test_manager(self):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
-        self.assert_(stdout.startswith('Name: manager'))
-        self.assert_('Modules:' in stdout)
-        self.assert_('Loaded modules:' in stdout)
+        self.assertTrue(stdout.startswith('Name: manager'))
+        self.assertTrue('Modules:' in stdout)
+        self.assertTrue('Loaded modules:' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -386,9 +386,9 @@ class rtcatTests(unittest.TestCase):
         self.assertEqual(stdout, '+DataInPort: in')
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_(stdout.startswith('-DataInPort: in'))
-        self.assert_('dataport.data_type' in stdout)
-        self.assert_('TimedLong' in stdout)
+        self.assertTrue(stdout.startswith('-DataInPort: in'))
+        self.assertTrue('dataport.data_type' in stdout)
+        self.assertTrue('TimedLong' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -630,7 +630,7 @@ class rtcompTests(unittest.TestCase):
         t = rtctree.tree.RTCTree(paths=p)
         c = t.get_node(p)
         self.assertNotEqual(c, None)
-        self.assert_(c.is_composite)
+        self.assertTrue(c.is_composite)
 
     def _assert_comp_has_member(self, comp, member):
         p = ['/', 'localhost', 'local.host_cxt', comp]
@@ -642,7 +642,7 @@ class rtcompTests(unittest.TestCase):
             if m.get_component_profile().instance_name == member:
                 has_member = True
                 break
-        self.assert_(has_member)
+        self.assertTrue(has_member)
 
     def _assert_comp_not_has_member(self, comp, member):
         p = ['/', 'localhost', 'local.host_cxt', comp]
@@ -654,7 +654,7 @@ class rtcompTests(unittest.TestCase):
             if m.get_component_profile().instance_name == member:
                 has_member = True
                 break
-        self.assert_(not has_member)
+        self.assertTrue(not has_member)
 
     def _assert_comp_exports_port(self, comp, port):
         p = ['/', 'localhost', 'local.host_cxt', comp]
@@ -662,7 +662,7 @@ class rtcompTests(unittest.TestCase):
         c = t.get_node(p)
         self.assertNotEqual(c, None)
         ports = c.conf_sets['default'].data['exported_ports'].split(',')
-        self.assert_(port in ports)
+        self.assertTrue(port in ports)
 
     def _assert_comp_not_exports_port(self, comp, port):
         p = ['/', 'localhost', 'local.host_cxt', comp]
@@ -670,7 +670,7 @@ class rtcompTests(unittest.TestCase):
         c = t.get_node(p)
         self.assertNotEqual(c, None)
         ports = c.conf_sets['default'].data['exported_ports'].split(',')
-        self.assert_(port not in ports)
+        self.assertTrue(port not in ports)
 
 
 def rtcomp_suite():
@@ -704,10 +704,10 @@ class rtconTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' in stdout)
 
     def test_set_props(self):
         stdout, stderr, ret = call_process(['./rtcon',
@@ -719,10 +719,10 @@ class rtconTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-ll',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('dataport.subscription_type      new' in stdout)
+        self.assertTrue('dataport.subscription_type      new' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-ll',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('dataport.subscription_type      new' in stdout)
+        self.assertTrue('dataport.subscription_type      new' in stdout)
 
     def test_bad_prop(self):
         stdout, stderr, ret = call_process(['./rtcon',
@@ -730,12 +730,12 @@ class rtconTests(unittest.TestCase):
             '/localhost/local.host_cxt/Output0.rtc:out',
             '-p', 'dataport.subscription_type'])
         self.assertEqual(stdout, '')
-        self.assert_(
+        self.assertTrue(
             'Bad property format: dataport.subscription_type' in stderr)
         self.assertEqual(ret, 2)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('Connected to: /localhost/local.host_cxt/Output0.rtc:out'\
+        self.assertTrue('Connected to: /localhost/local.host_cxt/Output0.rtc:out'\
                 not in stdout)
 
     def test_set_name(self):
@@ -748,10 +748,10 @@ class rtconTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-ll',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('test_conn' in stdout)
+        self.assertTrue('test_conn' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-ll',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('test_conn' in stdout)
+        self.assertTrue('test_conn' in stdout)
 
     def test_set_id(self):
         stdout, stderr, ret = call_process(['./rtcon',
@@ -763,10 +763,10 @@ class rtconTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-ll',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('conn_id' in stdout)
+        self.assertTrue('conn_id' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-ll',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('conn_id' in stdout)
+        self.assertTrue('conn_id' in stdout)
 
     def test_no_source_port(self):
         test_sourceportnotfound(self, './rtcon', obj1='Std0.rtc',
@@ -777,14 +777,14 @@ class rtconTests(unittest.TestCase):
     def test_not_enough_targets(self):
         stdout, stderr, ret = call_process(['./rtcon', 'Std0.rtc:in'])
         self.assertEqual(stdout, '')
-        self.assert_('Usage:' in stderr)
+        self.assertTrue('Usage:' in stderr)
         self.assertEqual(ret, 1)
 
     def test_too_many_targets(self):
         stdout, stderr, ret = call_process(['./rtcon', 'Std0.rtc:in',
             'Output0.rtc:out', 'Err0.rtc:in'])
         self.assertEqual(stdout, '')
-        self.assert_('Usage:' in stderr)
+        self.assertTrue('Usage:' in stderr)
         self.assertEqual(ret, 1)
 
     def test_no_dest_port(self):
@@ -871,9 +871,9 @@ class rtconfTests(unittest.TestCase):
     def test_list(self):
         stdout, stderr, ret = call_process(['./rtconf',
             '/localhost/local.host_cxt/Std0.rtc', 'list'])
-        self.assert_('+default*' in stdout)
-        self.assert_('+set1' in stdout)
-        self.assert_('+set2' in stdout)
+        self.assertTrue('+default*' in stdout)
+        self.assertTrue('+set1' in stdout)
+        self.assertTrue('+set2' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -1037,7 +1037,7 @@ class rtconfTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtconf', '-a',
             '/localhost/local.host_cxt/Std0.rtc', 'act', '-s', '__hidden__'])
         self.assertEqual(stdout, '')
-        self.assert_('SDOPackage.InternalError' in stderr)
+        self.assertTrue('SDOPackage.InternalError' in stderr)
         self.assertEqual(ret, 1)
 
     def test_context(self):
@@ -1083,52 +1083,52 @@ class rtcryoTests(unittest.TestCase):
         stop_ns(self._ns)
 
     def _check_rtsys_xml(self, rtsys):
-        self.assert_(rtsys.startswith('<?xml'))
+        self.assertTrue(rtsys.startswith('<?xml'))
         # Components
-        self.assert_('rts:instanceName="Std0"' in rtsys)
-        self.assert_('rts:instanceName="Output0"' in rtsys)
+        self.assertTrue('rts:instanceName="Std0"' in rtsys)
+        self.assertTrue('rts:instanceName="Output0"' in rtsys)
         # Configuration sets and parameters
-        self.assert_('rts:ConfigurationSets rts:id="default"' in rtsys)
-        self.assert_('rts:ConfigurationSets rts:id="__hidden__"' in rtsys)
-        self.assert_('rts:ConfigurationSets rts:id="set1"' in rtsys)
-        self.assert_('rts:ConfigurationSets rts:id="set2"' in rtsys)
-        self.assert_('rts:name="param"' in rtsys)
-        self.assert_('rts:data="0"' in rtsys)
-        self.assert_('rts:data="1"' in rtsys)
-        self.assert_('rts:data="42"' in rtsys)
-        self.assert_('rts:data="3"' in rtsys)
+        self.assertTrue('rts:ConfigurationSets rts:id="default"' in rtsys)
+        self.assertTrue('rts:ConfigurationSets rts:id="__hidden__"' in rtsys)
+        self.assertTrue('rts:ConfigurationSets rts:id="set1"' in rtsys)
+        self.assertTrue('rts:ConfigurationSets rts:id="set2"' in rtsys)
+        self.assertTrue('rts:name="param"' in rtsys)
+        self.assertTrue('rts:data="0"' in rtsys)
+        self.assertTrue('rts:data="1"' in rtsys)
+        self.assertTrue('rts:data="42"' in rtsys)
+        self.assertTrue('rts:data="3"' in rtsys)
         # Connections
-        self.assert_('rts:DataPortConnectors' in rtsys)
-        self.assert_('rts:name="in_out"' in rtsys)
-        self.assert_('rts:sourceDataPort' in rtsys)
-        self.assert_('rts:portName="Output0.out"' in rtsys)
-        self.assert_('rts:targetDataPort' in rtsys)
-        self.assert_('rts:portName="Std0.in"' in rtsys)
+        self.assertTrue('rts:DataPortConnectors' in rtsys)
+        self.assertTrue('rts:name="in_out"' in rtsys)
+        self.assertTrue('rts:sourceDataPort' in rtsys)
+        self.assertTrue('rts:portName="Output0.out"' in rtsys)
+        self.assertTrue('rts:targetDataPort' in rtsys)
+        self.assertTrue('rts:portName="Std0.in"' in rtsys)
         # Can it be loaded?
         rtsprofile.rts_profile.RtsProfile(xml_spec=rtsys)
 
     def _check_rtsys_yaml(self, rtsys):
-        self.assert_(rtsys.startswith('rtsProfile:'))
+        self.assertTrue(rtsys.startswith('rtsProfile:'))
         # Components
-        self.assert_('instanceName: Std0' in rtsys)
-        self.assert_('instanceName: Output0' in rtsys)
+        self.assertTrue('instanceName: Std0' in rtsys)
+        self.assertTrue('instanceName: Output0' in rtsys)
         # Configuration sets and parameters
-        self.assert_('id: default' in rtsys)
-        self.assert_('id: __hidden__' in rtsys)
-        self.assert_('id: set1' in rtsys)
-        self.assert_('id: set2' in rtsys)
-        self.assert_('name: param' in rtsys)
-        self.assert_("data: '0'" in rtsys)
-        self.assert_("data: '1'" in rtsys)
-        self.assert_("data: '42'" in rtsys)
-        self.assert_("data: '3'" in rtsys)
+        self.assertTrue('id: default' in rtsys)
+        self.assertTrue('id: __hidden__' in rtsys)
+        self.assertTrue('id: set1' in rtsys)
+        self.assertTrue('id: set2' in rtsys)
+        self.assertTrue('name: param' in rtsys)
+        self.assertTrue("data: '0'" in rtsys)
+        self.assertTrue("data: '1'" in rtsys)
+        self.assertTrue("data: '42'" in rtsys)
+        self.assertTrue("data: '3'" in rtsys)
         # Connections
-        self.assert_('dataPortConnectors' in rtsys)
-        self.assert_('name: in_out' in rtsys)
-        self.assert_('sourceDataPort' in rtsys)
-        self.assert_('portName: Output0.out' in rtsys)
-        self.assert_('targetDataPort' in rtsys)
-        self.assert_('portName: Std0.in' in rtsys)
+        self.assertTrue('dataPortConnectors' in rtsys)
+        self.assertTrue('name: in_out' in rtsys)
+        self.assertTrue('sourceDataPort' in rtsys)
+        self.assertTrue('portName: Output0.out' in rtsys)
+        self.assertTrue('targetDataPort' in rtsys)
+        self.assertTrue('portName: Std0.in' in rtsys)
         # Can it be loaded?
         rtsprofile.rts_profile.RtsProfile(yaml_spec=rtsys)
 
@@ -1173,7 +1173,7 @@ class rtcryoTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         orig = load_file('./test/sys.rtsys')
         self.assertNotEqual(stdout, orig)
-        self.assert_('rts:abstract="This is an abstract"' in stdout)
+        self.assertTrue('rts:abstract="This is an abstract"' in stdout)
 
     def test_freeze_sysname(self):
         stdout, stderr, ret = call_process(['./rtcryo', '-n',
@@ -1182,7 +1182,7 @@ class rtcryoTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         orig = load_file('./test/sys.rtsys')
         self.assertNotEqual(stdout, orig)
-        self.assert_('rts:id="RTSystem :Me.system name.0"' in stdout)
+        self.assertTrue('rts:id="RTSystem :Me.system name.0"' in stdout)
 
     def test_freeze_version(self):
         stdout, stderr, ret = call_process(['./rtcryo', '-v',
@@ -1191,7 +1191,7 @@ class rtcryoTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         orig = load_file('./test/sys.rtsys')
         self.assertNotEqual(stdout, orig)
-        self.assert_('rts:id="RTSystem :Me.RTSystem.42"' in stdout)
+        self.assertTrue('rts:id="RTSystem :Me.RTSystem.42"' in stdout)
 
     def test_freeze_vendor(self):
         stdout, stderr, ret = call_process(['./rtcryo', '-e',
@@ -1200,7 +1200,7 @@ class rtcryoTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         orig = load_file('./test/sys.rtsys')
         self.assertNotEqual(stdout, orig)
-        self.assert_('rts:id="RTSystem :UnitTest.RTSystem.0"' in stdout)
+        self.assertTrue('rts:id="RTSystem :UnitTest.RTSystem.0"' in stdout)
 
 
 def rtcryo_suite():
@@ -1558,14 +1558,14 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' not in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Err0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
 
     def test_disconnect_one_from_many(self):
         stdout, stderr, ret = call_process(['./rtdis',
@@ -1576,14 +1576,14 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Err0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
 
     def test_disconnect_one_from_one(self):
         # Get rid of one connection to prepare for the test
@@ -1600,10 +1600,10 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' not in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Err0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
 
     def test_disconnect_one_by_id(self):
         stdout, stderr, ret = call_process(['./rtdis', '-i', 'con1',
@@ -1614,14 +1614,14 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Err0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
 
     def test_disconnect_all_by_id(self):
         stdout, stderr, ret = call_process(['./rtdis', '-i', 'con1', '-v', 
@@ -1631,14 +1631,14 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' not in stdout)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Err0.rtc:in'])
-        self.assert_('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc:out' in stdout)
 
     def test_disconnect_not_connected(self):
         # Get rid of one connection to prepare for the test
@@ -1657,7 +1657,7 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 1)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
 
     def test_disconnect_bad_id(self):
         stdout, stderr, ret = call_process(['./rtdis', '-i', 'no_id',
@@ -1669,8 +1669,8 @@ class rtdisTests(unittest.TestCase):
         self.assertEqual(ret, 1)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' in stdout)
-        self.assert_('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Err0.rtc:in' in stdout)
 
     def test_no_source_port(self):
         test_sourceportnotfound(self, 'rtdis', obj1='Std0.rtc',
@@ -1682,7 +1682,7 @@ class rtdisTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtdis', 'Std0.rtc:in',
             'Output0.rtc:out', 'Err0.rtc:in'])
         self.assertEqual(stdout, '')
-        self.assert_('Usage:' in stderr)
+        self.assertTrue('Usage:' in stderr)
         self.assertEqual(ret, 1)
 
     def test_no_dest_port(self):
@@ -1757,22 +1757,22 @@ class rtdocTests(unittest.TestCase):
         stop_ns(self._ns)
 
     def _check_stdout(self, stdout, title):
-        self.assert_(title in stdout)
-        self.assert_('Documentation component' in stdout)
-        self.assert_('Geoffrey Biggs' in stdout)
-        self.assert_('test' in stdout)
-        self.assert_('EPL' in stdout)
-        self.assert_('example.com' in stdout)
-        self.assert_('http://www.openrtm.org' in stdout)
-        self.assert_('This is the introduction.' in stdout)
-        self.assert_('This component requires nothing.' in stdout)
-        self.assert_('You cannot install this component.' in stdout)
-        self.assert_('You cannot use it, either.' in stdout)
-        self.assert_('Miscellaneous is hard to spell.' in stdout)
-        self.assert_('No changes.' in stdout)
-        self.assert_('param' in stdout)
-        self.assert_('This port receives stuff.' in stdout)
-        self.assert_('Another section.' in stdout)
+        self.assertTrue(title in stdout)
+        self.assertTrue('Documentation component' in stdout)
+        self.assertTrue('Geoffrey Biggs' in stdout)
+        self.assertTrue('test' in stdout)
+        self.assertTrue('EPL' in stdout)
+        self.assertTrue('example.com' in stdout)
+        self.assertTrue('http://www.openrtm.org' in stdout)
+        self.assertTrue('This is the introduction.' in stdout)
+        self.assertTrue('This component requires nothing.' in stdout)
+        self.assertTrue('You cannot install this component.' in stdout)
+        self.assertTrue('You cannot use it, either.' in stdout)
+        self.assertTrue('Miscellaneous is hard to spell.' in stdout)
+        self.assertTrue('No changes.' in stdout)
+        self.assertTrue('param' in stdout)
+        self.assertTrue('This port receives stuff.' in stdout)
+        self.assertTrue('Another section.' in stdout)
 
     def test_doc(self):
         stdout, stderr, ret = call_process(['./rtdoc',
@@ -1805,20 +1805,20 @@ class rtdocTests(unittest.TestCase):
     def test_no_doc(self):
         stdout, stderr, ret = call_process(['./rtdoc',
             '/localhost/local.host_cxt/Std0.rtc', '-f', 'rst'])
-        self.assert_(stdout.startswith('Std0.rtc\n'))
-        self.assert_('Introduction' not in stdout)
-        self.assert_('Requirements' not in stdout)
-        self.assert_('Installation' not in stdout)
-        self.assert_('Usage' not in stdout)
+        self.assertTrue(stdout.startswith('Std0.rtc\n'))
+        self.assertTrue('Introduction' not in stdout)
+        self.assertTrue('Requirements' not in stdout)
+        self.assertTrue('Installation' not in stdout)
+        self.assertTrue('Usage' not in stdout)
         self.assertEqual(stderr, ''),
         self.assertEqual(ret, 0)
 
     def test_no_ports_config(self):
         stdout, stderr, ret = call_process(['./rtdoc',
             '/localhost/local.host_cxt/Doc20.rtc', '-f', 'rst'])
-        self.assert_(stdout.startswith('Doc20.rtc\n'))
-        self.assert_('Ports' not in stdout)
-        self.assert_('Configuration parameters' not in stdout)
+        self.assertTrue(stdout.startswith('Doc20.rtc\n'))
+        self.assertTrue('Ports' not in stdout)
+        self.assertTrue('Configuration parameters' not in stdout)
         self.assertEqual(stderr, ''),
         self.assertEqual(ret, 0)
 
@@ -1847,12 +1847,12 @@ class rtdocTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtdoc',
             '/localhost/local.host_cxt/Doc0.rtc', '-f', 'rst'])
         stdout = stdout.partition('Usage'),
-        self.assert_('Installation' in stdout[0][0])
-        self.assert_('Installation' not in stdout[0][2])
-        self.assert_('Changelog' not in stdout[0][0])
-        self.assert_('Changelog' in stdout[0][2])
-        self.assert_('Another' not in stdout[0][0])
-        self.assert_('Another' in stdout[0][2])
+        self.assertTrue('Installation' in stdout[0][0])
+        self.assertTrue('Installation' not in stdout[0][2])
+        self.assertTrue('Changelog' not in stdout[0][0])
+        self.assertTrue('Changelog' in stdout[0][2])
+        self.assertTrue('Another' not in stdout[0][0])
+        self.assertTrue('Another' in stdout[0][2])
         self.assertEqual(stderr, ''),
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtconf', '-a', '-s', '__doc__',
@@ -1862,12 +1862,12 @@ class rtdocTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtdoc',
             '/localhost/local.host_cxt/Doc0.rtc', '-f', 'rst'])
         stdout = stdout.partition('Usage'),
-        self.assert_('Installation' not in stdout[0][0])
-        self.assert_('Installation' in stdout[0][2])
-        self.assert_('Changelog' in stdout[0][0])
-        self.assert_('Changelog' not in stdout[0][2])
-        self.assert_('Another' not in stdout[0][0])
-        self.assert_('Another' in stdout[0][2])
+        self.assertTrue('Installation' not in stdout[0][0])
+        self.assertTrue('Installation' in stdout[0][2])
+        self.assertTrue('Changelog' in stdout[0][0])
+        self.assertTrue('Changelog' not in stdout[0][2])
+        self.assertTrue('Another' not in stdout[0][0])
+        self.assertTrue('Another' in stdout[0][2])
         self.assertEqual(stderr, ''),
         self.assertEqual(ret, 0)
 
@@ -1961,16 +1961,16 @@ class rtfindTests(unittest.TestCase):
 
     def test_find_by_type_c(self):
         stdout, stderr, ret = call_process(['./rtfind', '.', '-t', 'c'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc' in stdout)
-        self.assert_('/localhost/local.host_cxt/Output0.rtc' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
     def test_find_by_type_d(self):
         stdout, stderr, ret = call_process(['./rtfind', '.', '-t', 'd'])
-        self.assert_('/localhost' in stdout)
-        self.assert_('/localhost/local.host_cxt' in stdout)
-        self.assert_('/localhost/local.host_cxt/manager.mgr' in stdout)
+        self.assertTrue('/localhost' in stdout)
+        self.assertTrue('/localhost/local.host_cxt' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/manager.mgr' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -1994,9 +1994,9 @@ class rtfindTests(unittest.TestCase):
 
     def test_find_by_type_multiple(self):
         stdout, stderr, ret = call_process(['./rtfind', '.', '-t', 'cm'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc' in stdout)
-        self.assert_('/localhost/local.host_cxt/Output0.rtc' in stdout)
-        self.assert_('/localhost/local.host_cxt/manager.mgr' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Output0.rtc' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/manager.mgr' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -2285,7 +2285,7 @@ class rtlogTests(unittest.TestCase):
             '/localhost/local.host_cxt/Std0.rtc:in.nums',
             '-f', './test/output.rtlog', '-p', '-s', '1297156964'])
         self.assertEqual(stdout, '')
-        self.assert_(re.match(r'Playing from \d{4}-\d{2}-\d{2} '
+        self.assertTrue(re.match(r'Playing from \d{4}-\d{2}-\d{2} '
             '\d{2}:\d{2}:\d{2} \(\d+.\d+\)\.\nrtlog: End of log reached.',
             stderr) is not None)
         self.assertEqual(ret, 0)
@@ -2297,7 +2297,7 @@ class rtlogTests(unittest.TestCase):
             '/localhost/local.host_cxt/Std0.rtc:in.nums',
             '-f', './test/output.rtlog', '-p', '-e', '1297156966'])
         self.assertEqual(stdout, '')
-        self.assert_(re.match(r'Playing until \d{4}-\d{2}-\d{2} '
+        self.assertTrue(re.match(r'Playing until \d{4}-\d{2}-\d{2} '
             '\d{2}:\d{2}:\d{2} \(\d+.\d+\)\.',
             stderr) is not None)
         self.assertEqual(ret, 0)
@@ -2310,7 +2310,7 @@ class rtlogTests(unittest.TestCase):
             '-f', './test/output.rtlog', '-p', '-s', '1297156964', '-e',
             '1297156966'])
         self.assertEqual(stdout, '')
-        self.assert_(re.match(r'Playing from \d{4}-\d{2}-\d{2} '
+        self.assertTrue(re.match(r'Playing from \d{4}-\d{2}-\d{2} '
             '\d{2}:\d{2}:\d{2} \(\d+.\d+\) until \d{4}-\d{2}-\d{2} '
             '\d{2}:\d{2}:\d{2} \(\d+.\d+\)\.', stderr) is not None)
         self.assertEqual(ret, 0)
@@ -2340,15 +2340,15 @@ class rtlogTests(unittest.TestCase):
         time.sleep(1)
         logger.terminate()
         stdout, stderr = logger.communicate()
-        print stdout
-        print stderr
+        print(stdout)
+        print(stderr)
         self.assertEqual(stdout, '')
         self.assertEqual(stderr, '')
         self.assertEqual(logger.returncode, -15)
         stdout, stderr, ret = call_process(['./rtlog', '-d', '-f',
             './test/test.rtlog'])
-        self.assert_(self._num_recorded(stdout) > 0)
-        self.assert_(self._log_start(stdout) > now)
+        self.assertTrue(self._num_recorded(stdout) > 0)
+        self.assertTrue(self._log_start(stdout) > now)
 
     def _test_record_limit_index(self):
         logger = start_process(['./rtlog',
@@ -2362,7 +2362,7 @@ class rtlogTests(unittest.TestCase):
         self.assertEqual(logger.returncode, 0)
         stdout, stderr, ret = call_process(['./rtlog', '-d', '-f',
             './test/test.rtlog'])
-        self.assert_(self._num_recorded(stdout) == 5)
+        self.assertTrue(self._num_recorded(stdout) == 5)
 
     def _test_record_limit_time(self):
         limit = time.time() + 3
@@ -2375,12 +2375,12 @@ class rtlogTests(unittest.TestCase):
         self.assertEqual(stdout, '')
         m = re.match(r'Recording until \d{4}-\d{2}-\d{2} '
             '\d{2}:\d{2}:\d{2} \((\d+.\d+)\)\.', stderr)
-        self.assert_(m is not None)
-        self.assert_(abs(float(m.group(1)) - limit) < 0.01)
+        self.assertTrue(m is not None)
+        self.assertTrue(abs(float(m.group(1)) - limit) < 0.01)
         self.assertEqual(logger.returncode, 0)
         stdout, stderr, ret = call_process(['./rtlog', '-d', '-f',
             './test/test.rtlog'])
-        self.assert_(self._num_recorded(stdout) > 0)
+        self.assertTrue(self._num_recorded(stdout) > 0)
 
     def _test_record_timeout(self):
         call_process(['./rtact', '/localhost/local.host_cxt/Output0.rtc'])
@@ -2393,28 +2393,28 @@ class rtlogTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtlog', '-d', '-f',
             './test/test.rtlog'])
-        self.assert_(self._num_recorded(stdout) > 0)
+        self.assertTrue(self._num_recorded(stdout) > 0)
         log_length = self._log_end(stdout) - self._log_start(stdout)
-        self.assert_(log_length < 3.5)
-        self.assert_(log_length > 2.5)
+        self.assertTrue(log_length < 3.5)
+        self.assertTrue(log_length > 2.5)
 
     def _test_display_info(self):
         stdout, stderr, ret = call_process(['./rtlog', '-d', '-f',
             './test/output.rtlog'])
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
-        self.assert_('Size: 1.41KiB (1446B)' in stdout)
-        self.assert_('Start time: 2011-02-08 18:22:42 (1297156962.58)' in
+        self.assertTrue('Size: 1.41KiB (1446B)' in stdout)
+        self.assertTrue('Start time: 2011-02-08 18:22:42 (1297156962.58)' in
                 stdout)
-        self.assert_('First entry time: 2011-02-08 18:22:43 '
+        self.assertTrue('First entry time: 2011-02-08 18:22:43 '
                 '(1297156963.450684160)' in stdout)
-        self.assert_('End time: 2011-02-08 18:22:47 '
+        self.assertTrue('End time: 2011-02-08 18:22:47 '
                 '(1297156967.592355840)' in stdout)
-        self.assert_('Number of entries: 5' in stdout)
-        self.assert_('Channel 1' in stdout)
-        self.assert_('Name: nums' in stdout)
-        self.assert_('Data type: TimedLong (RTC.TimedLong)' in stdout)
-        self.assert_('/localhost/odyssey.host_cxt/ConsoleIn0.rtc:out.nums' in
+        self.assertTrue('Number of entries: 5' in stdout)
+        self.assertTrue('Channel 1' in stdout)
+        self.assertTrue('Name: nums' in stdout)
+        self.assertTrue('Data type: TimedLong (RTC.TimedLong)' in stdout)
+        self.assertTrue('/localhost/odyssey.host_cxt/ConsoleIn0.rtc:out.nums' in
                 stdout)
 
     def test_playback_usermod(self):
@@ -2444,7 +2444,7 @@ class rtlogTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtlog', '-d', '-f',
             './test/test.rtlog', '--path=./test', '-m', 'MyData'])
-        self.assert_(self._num_recorded(stdout) == 5)
+        self.assertTrue(self._num_recorded(stdout) == 5)
 
     def _test_record_text(self):
         call_process(['./rtact', '/localhost/local.host_cxt/Output0.rtc'])
@@ -2455,7 +2455,7 @@ class rtlogTests(unittest.TestCase):
         self.assertEqual(stdout, '')
         self.assertEqual(stderr, 'Recording 5 entries.')
         self.assertEqual(ret, 0)
-        self.assert_(re.match(r"\d+.\d+\s+\('input0', "
+        self.assertTrue(re.match(r"\d+.\d+\s+\('input0', "
             "RTC\.TimedLong\(tm=RTC\.Time\(sec=0L, nsec=0L\), data=\d+\)\)\n",
             load_file('./test/test.rtlog')) is not None)
 
@@ -2522,34 +2522,34 @@ class rtlsTests(unittest.TestCase):
     def test_ls_hc(self):
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt'])
-        self.assert_('Std0.rtc' in stdout)
-        self.assert_('Output0.rtc' in stdout)
-        self.assert_('*Zombie0.rtc' in stdout)
-        self.assert_('manager.mgr' in stdout)
+        self.assertTrue('Std0.rtc' in stdout)
+        self.assertTrue('Output0.rtc' in stdout)
+        self.assertTrue('*Zombie0.rtc' in stdout)
+        self.assertTrue('manager.mgr' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtls',
             '/localhost/local.host_cxt'])
-        self.assert_('Std0.rtc' in stdout)
-        self.assert_('Output0.rtc' in stdout)
-        self.assert_('*Zombie0.rtc' in stdout)
-        self.assert_('manager.mgr' in stdout)
+        self.assertTrue('Std0.rtc' in stdout)
+        self.assertTrue('Output0.rtc' in stdout)
+        self.assertTrue('*Zombie0.rtc' in stdout)
+        self.assertTrue('manager.mgr' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
     def test_ls_mgr_dir(self):
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Motor0.rtc' in stdout)
-        self.assert_('Controller0.rtc' in stdout)
-        self.assert_('Sensor0.rtc' in stdout)
+        self.assertTrue('Motor0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
+        self.assertTrue('Sensor0.rtc' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtls',
             '/localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Motor0.rtc' in stdout)
-        self.assert_('Controller0.rtc' in stdout)
-        self.assert_('Sensor0.rtc' in stdout)
+        self.assertTrue('Motor0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
+        self.assertTrue('Sensor0.rtc' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -2570,9 +2570,9 @@ class rtlsTests(unittest.TestCase):
     def test_ls_mgr_obj(self):
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Controller0.rtc' in stdout)
-        self.assert_('Motor0.rtc' in stdout)
-        self.assert_('Sensor0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
+        self.assertTrue('Motor0.rtc' in stdout)
+        self.assertTrue('Sensor0.rtc' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -2586,9 +2586,9 @@ class rtlsTests(unittest.TestCase):
     def test_ls_hc_long(self):
         stdout, stderr, ret = call_process(['./rtls', '-l',
             'localhost/local.host_cxt'])
-        self.assert_('Inactive  1/0  1/0  0/0  0/0  Std0.rtc' in stdout)
-        self.assert_('Inactive  2/0  1/0  1/0  0/0  Motor0.rtc' in stdout)
-        self.assert_('-         -    -    -    -    manager.mgr' in stdout)
+        self.assertTrue('Inactive  1/0  1/0  0/0  0/0  Std0.rtc' in stdout)
+        self.assertTrue('Inactive  2/0  1/0  1/0  0/0  Motor0.rtc' in stdout)
+        self.assertTrue('-         -    -    -    -    manager.mgr' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -2608,25 +2608,25 @@ class rtlsTests(unittest.TestCase):
 
     def test_ls_recurse(self):
         stdout, stderr, ret = call_process(['./rtls', '-R'])
-        self.assert_('/localhost' in stdout)
-        self.assert_('/localhost/local.host_cxt' in stdout)
-        self.assert_('Std0.rtc' in stdout)
-        self.assert_('Motor0.rtc' in stdout)
-        self.assert_('/localhost/local.host_cxt/manager.mgr' in stdout)
-        self.assert_('manager.mgr' in stdout)
-        self.assert_('*Zombie0.rtc' in stdout)
+        self.assertTrue('/localhost' in stdout)
+        self.assertTrue('/localhost/local.host_cxt' in stdout)
+        self.assertTrue('Std0.rtc' in stdout)
+        self.assertTrue('Motor0.rtc' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/manager.mgr' in stdout)
+        self.assertTrue('manager.mgr' in stdout)
+        self.assertTrue('*Zombie0.rtc' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
     def test_ls_recurse_long(self):
         stdout, stderr, ret = call_process(['./rtls', '-lR'])
-        self.assert_('/localhost' in stdout)
-        self.assert_('/localhost/local.host_cxt' in stdout)
-        self.assert_('Inactive  1/0  1/0  0/0  0/0  Std0.rtc' in stdout)
-        self.assert_('Inactive  2/0  1/0  1/0  0/0  Motor0.rtc' in stdout)
-        self.assert_('/localhost/local.host_cxt/manager.mgr' in stdout)
-        self.assert_('-         -    -    -    -    manager.mgr' in stdout)
-        self.assert_('-         -    -    -    -    *Zombie0.rtc' in stdout)
+        self.assertTrue('/localhost' in stdout)
+        self.assertTrue('/localhost/local.host_cxt' in stdout)
+        self.assertTrue('Inactive  1/0  1/0  0/0  0/0  Std0.rtc' in stdout)
+        self.assertTrue('Inactive  2/0  1/0  1/0  0/0  Motor0.rtc' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/manager.mgr' in stdout)
+        self.assertTrue('-         -    -    -    -    manager.mgr' in stdout)
+        self.assertTrue('-         -    -    -    -    *Zombie0.rtc' in stdout)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -2683,7 +2683,7 @@ class rtmgrTests(unittest.TestCase):
         self.assertEqual(ret, 0)
 
     def _grab_section(self, stdout, sec, next_sec=''):
-        self.assert_(sec in stdout)
+        self.assertTrue(sec in stdout)
         if not next_sec:
             next_sec = '$'
         return re.match(r'.*?\n{0}\n(.*?){1}'.format(sec, next_sec), stdout,
@@ -2699,20 +2699,20 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
 
     def test_load_mod_no_init(self):
         stdout, stderr, ret = call_process(['./rtmgr',
             '/localhost/local.host_cxt/manager.mgr', '-l',
             os.path.join(COMP_LIB_PATH, 'Motor.so')])
         self.assertEqual(stdout, '')
-        self.assert_(stderr.endswith('rtmgr: error: No initialisation '
+        self.assertTrue(stderr.endswith('rtmgr: error: No initialisation '
             'function specified.'))
         self.assertEqual(ret, 2)
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') not in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') not in loaded)
 
     def test_create_rtc(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2722,10 +2722,10 @@ class rtmgrTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Controller0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/'])
-        self.assert_('Controller0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
 
     def test_delete_rtc(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2735,10 +2735,10 @@ class rtmgrTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Sensor0.rtc' not in stdout)
+        self.assertTrue('Sensor0.rtc' not in stdout)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/'])
-        self.assert_('Sensor0.rtc' not in stdout)
+        self.assertTrue('Sensor0.rtc' not in stdout)
 
     def test_unload_mod(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2750,7 +2750,7 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Controller.so') not in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Controller.so') not in loaded)
 
     def test_no_cmds(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2778,14 +2778,14 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') not in loaded)
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Controller.so') in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') not in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Controller.so') in loaded)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Controller0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/'])
-        self.assert_('Controller0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
 
     def test_port(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2847,7 +2847,7 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
 
     def test_create_rtc_corbaloc(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2857,10 +2857,10 @@ class rtmgrTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Controller0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/'])
-        self.assert_('Controller0.rtc' in stdout)
+        self.assertTrue('Controller0.rtc' in stdout)
 
     def test_delete_rtc_corbaloc(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2870,10 +2870,10 @@ class rtmgrTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/manager.mgr'])
-        self.assert_('Sensor0.rtc' not in stdout)
+        self.assertTrue('Sensor0.rtc' not in stdout)
         stdout, stderr, ret = call_process(['./rtls',
             'localhost/local.host_cxt/'])
-        self.assert_('Sensor0.rtc' not in stdout)
+        self.assertTrue('Sensor0.rtc' not in stdout)
 
     def test_unload_mod_corbaloc(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2885,7 +2885,7 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Controller.so') not in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Controller.so') not in loaded)
 
     def test_load_mod_corbaloc_no_port(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2897,7 +2897,7 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
 
     def test_load_mod_corbaloc_no_id(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2909,7 +2909,7 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
 
     def test_load_mod_corbaloc_no_port_or_id(self):
         stdout, stderr, ret = call_process(['./rtmgr',
@@ -2921,7 +2921,7 @@ class rtmgrTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/manager.mgr'])
         loaded = self._grab_section(stdout, 'Loaded modules:')
-        self.assert_(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
+        self.assertTrue(os.path.join(COMP_LIB_PATH, 'Motor.so') in loaded)
 
 
 def rtmgr_suite():
@@ -2974,21 +2974,21 @@ class rtprintTests(unittest.TestCase):
         time.sleep(3)
         p.terminate()
         stdout, stderr = p.communicate()
-        self.assert_(re.match(r'\[0\.0+\]\s\d+\n', stdout) is not None)
+        self.assertTrue(re.match(r'\[0\.0+\]\s\d+\n', stdout) is not None)
         self.assertEqual(stderr, '')
         self.assertEqual(p.returncode, -15)
 
     def test_print_count_limit(self):
         stdout, stderr, ret = call_process(['./rtprint',
             '/localhost/local.host_cxt/Output0.rtc:out', '-n', '2'])
-        self.assert_(re.match(r'\[0\.0+\]\s\d+\n\[0\.0+\]\s\d+$', stdout) is not None)
+        self.assertTrue(re.match(r'\[0\.0+\]\s\d+\n\[0\.0+\]\s\d+$', stdout) is not None)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
     def test_print_time_limit(self):
         stdout, stderr, ret = call_process(['./rtprint',
             '/localhost/local.host_cxt/Output0.rtc:out', '-t', '1'])
-        self.assert_(re.match(r'\[0\.0+\]\s\d+\n', stdout) is not None)
+        self.assertTrue(re.match(r'\[0\.0+\]\s\d+\n', stdout) is not None)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -2996,7 +2996,7 @@ class rtprintTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtprint',
             '/localhost/local.host_cxt/C10.rtc:output', '-n', '1',
             '-p', './test', '-m', 'MyData'])
-        self.assert_(re.match(r'MyData\.Bleg\(val1=1L, val2=\d+L\)', stdout) is not None)
+        self.assertTrue(re.match(r'MyData\.Bleg\(val1=1L, val2=\d+L\)', stdout) is not None)
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
 
@@ -3118,7 +3118,7 @@ class rtresurrectTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Output0.rtc:out'])
-        self.assert_('/localhost/local.host_cxt/Std0.rtc:in' in stdout)
+        self.assertTrue('/localhost/local.host_cxt/Std0.rtc:in' in stdout)
         stdout, stderr, ret = call_process(['./rtconf', '-s', 'set2',
             '/localhost/local.host_cxt/Std0.rtc', 'get', 'param'])
         self.assertEqual(stdout, '42')
@@ -3149,22 +3149,22 @@ class rtresurrectTests(unittest.TestCase):
             './test/sys.rtsys', '--dry-run'])
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
-        self.assert_('Check for required component "RTC:Geoffrey '
+        self.assertTrue('Check for required component "RTC:Geoffrey '
             'Biggs:test:Std:1.0", "Std0" at path '
             '/localhost/local.host_cxt/Std0.rtc (Required)' in stdout)
-        self.assert_('Check for required component "RTC:Geoffrey '
+        self.assertTrue('Check for required component "RTC:Geoffrey '
             'Biggs:Test:Output:1.0", "Output0" at path '
             '/localhost/local.host_cxt/Output0.rtc (Required)' in stdout)
-        self.assert_('Check for required port "in" on component at path '
+        self.assertTrue('Check for required port "in" on component at path '
             '/localhost/local.host_cxt/Std0.rtc (Required)' in stdout)
-        self.assert_('Check for required port "out" on component at path '
+        self.assertTrue('Check for required port "out" on component at path '
             '/localhost/local.host_cxt/Output0.rtc (Required)' in stdout)
-        self.assert_('Connect /localhost/local.host_cxt/Output0.rtc:out to '
+        self.assertTrue('Connect /localhost/local.host_cxt/Output0.rtc:out to '
             '/localhost/local.host_cxt/Std0.rtc:in with ID '
             'connection_id0 and properties' in stdout)
-        self.assert_('Set parameter "param" in set "set2" on component at '
+        self.assertTrue('Set parameter "param" in set "set2" on component at '
             'path /localhost/local.host_cxt/Std0.rtc to "42"' in stdout)
-        self.assert_('Set configuration set "default" active on component at '
+        self.assertTrue('Set configuration set "default" active on component at '
             'path /localhost/local.host_cxt/Std0.rtc' in stdout)
 
     def test_existing_con_diff_id(self):
@@ -3232,9 +3232,9 @@ class rtstartTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtstart', './test/sys.rtsys'])
         self.assertEqual(stdout, '')
         self.assertEqual(ret, 0)
-        self.assert_('Activate /localhost/local.host_cxt/Std0.rtc in '
+        self.assertTrue('Activate /localhost/local.host_cxt/Std0.rtc in '
             'execution context 0 (Required)' in stderr)
-        self.assert_('Activate /localhost/local.host_cxt/Output0.rtc in '
+        self.assertTrue('Activate /localhost/local.host_cxt/Output0.rtc in '
             'execution context 0 (Required)' in stderr)
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/Std0.rtc'])
@@ -3265,9 +3265,9 @@ class rtstartTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtstart', './test/sys.rtsys'])
         self.assertEqual(stdout, '')
         self.assertEqual(ret, 0)
-        self.assert_('Activate /localhost/local.host_cxt/Std0.rtc in '
+        self.assertTrue('Activate /localhost/local.host_cxt/Std0.rtc in '
             'execution context 0 (Required)' in stderr)
-        self.assert_('Activate /localhost/local.host_cxt/Output0.rtc in '
+        self.assertTrue('Activate /localhost/local.host_cxt/Output0.rtc in '
             'execution context 0 (Required)' in stderr)
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/Std0.rtc'])
@@ -3283,15 +3283,15 @@ class rtstartTests(unittest.TestCase):
             './test/sys.rtsys', '--dry-run'])
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
-        self.assert_('Check for required component "RTC:Geoffrey '
+        self.assertTrue('Check for required component "RTC:Geoffrey '
             'Biggs:test:Std:1.0", "Std0" at path '
             '/localhost/local.host_cxt/Std0.rtc (Required)' in stdout)
-        self.assert_('Check for required component "RTC:Geoffrey '
+        self.assertTrue('Check for required component "RTC:Geoffrey '
             'Biggs:Test:Output:1.0", "Output0" at path '
             '/localhost/local.host_cxt/Output0.rtc (Required)' in stdout)
-        self.assert_('Activate /localhost/local.host_cxt/Std0.rtc in '
+        self.assertTrue('Activate /localhost/local.host_cxt/Std0.rtc in '
             'execution context 0 (Required)' in stdout)
-        self.assert_('Activate /localhost/local.host_cxt/Output0.rtc in '
+        self.assertTrue('Activate /localhost/local.host_cxt/Output0.rtc in '
             'execution context 0 (Required)' in stdout)
 
 
@@ -3328,9 +3328,9 @@ class rtstopTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtstop', './test/sys.rtsys'])
         self.assertEqual(stdout, '')
         self.assertEqual(ret, 0)
-        self.assert_('Deactivate /localhost/local.host_cxt/Std0.rtc in '
+        self.assertTrue('Deactivate /localhost/local.host_cxt/Std0.rtc in '
             'execution context 0' in stderr)
-        self.assert_('Deactivate /localhost/local.host_cxt/Output0.rtc in '
+        self.assertTrue('Deactivate /localhost/local.host_cxt/Output0.rtc in '
             'execution context 0' in stderr)
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/Std0.rtc'])
@@ -3342,7 +3342,7 @@ class rtstopTests(unittest.TestCase):
     def test_missing_comp(self):
         stdout, stderr, ret = call_process(['./rtstop', './test/sys.rtsys'])
         self.assertEqual(stdout, '')
-        self.assert_('Action failed: Component missing: '
+        self.assertTrue('Action failed: Component missing: '
             '/localhost/local.host_cxt/Output0.rtc' in stderr)
         self.assertEqual(ret, 0)
 
@@ -3360,9 +3360,9 @@ class rtstopTests(unittest.TestCase):
         stdout, stderr, ret = call_process(['./rtstop', './test/sys.rtsys'])
         self.assertEqual(stdout, '')
         self.assertEqual(ret, 0)
-        self.assert_('Deactivate /localhost/local.host_cxt/Std0.rtc in '
+        self.assertTrue('Deactivate /localhost/local.host_cxt/Std0.rtc in '
             'execution context 0' in stderr)
-        self.assert_('Deactivate /localhost/local.host_cxt/Output0.rtc in '
+        self.assertTrue('Deactivate /localhost/local.host_cxt/Output0.rtc in '
             'execution context 0' in stderr)
         stdout, stderr, ret = call_process(['./rtcat',
             '/localhost/local.host_cxt/Std0.rtc'])
@@ -3378,9 +3378,9 @@ class rtstopTests(unittest.TestCase):
             './test/sys.rtsys', '--dry-run'])
         self.assertEqual(stderr, '')
         self.assertEqual(ret, 0)
-        self.assert_('Deactivate /localhost/local.host_cxt/Std0.rtc in '
+        self.assertTrue('Deactivate /localhost/local.host_cxt/Std0.rtc in '
             'execution context 0' in stdout)
-        self.assert_('Deactivate /localhost/local.host_cxt/Output0.rtc in '
+        self.assertTrue('Deactivate /localhost/local.host_cxt/Output0.rtc in '
             'execution context 0' in stdout)
 
 
@@ -3420,7 +3420,7 @@ class rtteardownTests(unittest.TestCase):
         self.assertEqual(ret, 0)
         stdout, stderr, ret = call_process(['./rtcat', '-l',
             '/localhost/local.host_cxt/Std0.rtc:in'])
-        self.assert_('Connected to' not in stdout)
+        self.assertTrue('Connected to' not in stdout)
 
     def test_missing_comp(self):
         stdout, stderr, ret = call_process(['./rtteardown',
diff --git a/test/unittests.py b/test/unittests.py
index 5dc8998..442fd3c 100755
--- a/test/unittests.py
+++ b/test/unittests.py
@@ -61,7 +61,7 @@ class TestEvalConst(unittest.TestCase):
 
     def test_replace_time(self):
         const = 'blurgle({time})'
-        self.assert_(len(rtshell.eval_const.replace_time(const)) > len(const))
+        self.assertTrue(len(rtshell.eval_const.replace_time(const)) > len(const))
 
     def test_eval_const(self):
         class Data(object):
-- 
2.25.1

